package com.example.sms_app.service

import android.Manifest
import android.annotation.SuppressLint
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Build
import android.os.IBinder
import android.telephony.SmsManager
import android.telephony.TelephonyManager
import android.util.Log
import androidx.core.app.NotificationCompat
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlin.coroutines.resume
import com.example.sms_app.R
import com.example.sms_app.data.Customer
import com.example.sms_app.data.SmsRepository
import kotlinx.coroutines.*
import kotlinx.coroutines.TimeoutCancellationException
import com.example.sms_app.presentation.activity.MainActivity
import com.example.sms_app.data.SmsTemplate
import android.os.Handler
import android.os.Looper
import android.app.Activity
import android.provider.Settings
import android.telephony.SubscriptionManager
import androidx.annotation.RequiresPermission
import com.example.sms_app.utils.*
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class SmsService : Service() {
    private var serviceJob: Job? = null
    private lateinit var smsRepository: SmsRepository
    private lateinit var smsResultReceiver: BroadcastReceiver
    private lateinit var smsDeliveryReceiver: BroadcastReceiver
    private val pendingSmsResults = mutableMapOf<String, kotlinx.coroutines.CancellableContinuation<Boolean>>()
    private val multipartMessageTracker = mutableMapOf<String, MutableSet<String>>() // Track parts of multipart messages
    private val pendingSmsDeliveries = mutableMapOf<String, Customer>()
    private var isRunning = false
    private var totalSent = 0
    private var totalToSend = 0
    private var currentTemplateId = 0
    private var intervalSeconds = 0
    private var maxRetryAttempts = 0
    private var retryDelaySeconds = 0
    private var isSendingMessages = false
    private var currentProgress = 0
    private var totalMessageCount = 0
    private val serviceScope = CoroutineScope(Dispatchers.IO)

    companion object {
        private const val TAG = "SmsService"
        const val NOTIFICATION_ID = 1
        const val CHANNEL_ID = "SmsServiceChannel"
        const val NOTIFICATION_CHANNEL_ID = "SmsServiceChannel"

        const val ACTION_PROGRESS_UPDATE = "com.example.sms_app.ACTION_PROGRESS_UPDATE"
        const val ACTION_SMS_COMPLETED = "com.example.sms_app.ACTION_SMS_COMPLETED"
        const val ACTION_CUSTOMER_DELETED = "com.example.sms_app.ACTION_CUSTOMER_DELETED"
        const val ACTION_SMS_COUNT_UPDATED = "com.example.sms_app.ACTION_SMS_COUNT_UPDATED"

        const val EXTRA_PROGRESS = "progress"
        const val EXTRA_TOTAL = "total"
        const val EXTRA_MESSAGE = "message"
        const val EXTRA_CUSTOMER_ID = "customer_id"
        const val EXTRA_TEMPLATE_ID = "template_id"
        const val EXTRA_INTERVAL_SECONDS = "interval_seconds"
        const val EXTRA_MAX_RETRY = "max_retry"
        const val EXTRA_RETRY_DELAY = "retry_delay"
        const val EXTRA_SIM_ID = "sim_id"
        const val EXTRA_SMS_COUNT = "sms_count"

        // SMS Delivery constants
        const val SMS_SENT_ACTION = "com.example.sms_app.SMS_SENT"
        const val SMS_DELIVERED_ACTION = "com.example.sms_app.SMS_DELIVERED"
    }

    data class SmsAttempt(
        val requestId: String,
        val phoneNumber: String,
        val message: String,
        val customer: Customer,
        val smsManager: SmsManager,
        val managerIndex: Int,
        val phoneFormat: String,
        val formatIndex: Int,
        val attemptNumber: Int,
        val maxAttempts: Int,
        val continuation: CancellableContinuation<Boolean>
    )

    // Global attempt tracking
    private val activeAttempts = mutableMapOf<String, SmsAttempt>()
    private val attemptQueue = mutableMapOf<String, MutableList<SmsAttempt>>()
    @RequiresPermission(Manifest.permission.READ_PHONE_STATE)
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "SmsService onCreate")
        isSendingMessages = false
        currentProgress = 0
        totalMessageCount = 0

        smsRepository = SmsRepository(applicationContext)

        // T·∫°o notification channel cho Android 8.0 tr·ªü l√™n
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                NOTIFICATION_CHANNEL_ID,
                "SMS Service Channel",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Channel for SMS sending service notifications"
                setShowBadge(false)
            }

            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }

        initialize()

        Log.d(TAG, "Using standard SMS APIs instead of dynamic loading")

        try {
            setupSmsResultReceiver()
            setupSmsDeliveryReceiver()
        } catch (e: Exception) {
            Log.e(TAG, "Failed to setup SMS result receiver", e)
        }

        // Ki·ªÉm tra c√°c c√†i ƒë·∫∑t thi·∫øt b·ªã
        val deviceStatus = checkDeviceSettings()
        Log.d(TAG, "Device status: $deviceStatus")
    }

    @SuppressLint("MissingPermission")
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üöÄ SmsService onStartCommand called, intent: ${intent?.action}")

        try {
            if (intent != null) {
                try {
                    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† action d·ª´ng d·ªãch v·ª• kh√¥ng
                    if (intent.action == "STOP_SMS_SERVICE") {
                        Log.d(TAG, "Received stop action from notification")
                        isRunning = false
                        sendCompletionBroadcast("D·ªãch v·ª• g·ª≠i SMS ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
                        stopSelf()
                        return START_NOT_STICKY
                    }

                    currentTemplateId = intent.getIntExtra(EXTRA_TEMPLATE_ID, 1)
                    intervalSeconds = intent.getIntExtra(EXTRA_INTERVAL_SECONDS, 25)
                    maxRetryAttempts = intent.getIntExtra(EXTRA_MAX_RETRY, 3)
                    retryDelaySeconds = intent.getIntExtra(EXTRA_RETRY_DELAY, 10)

                    Log.d(TAG, "üìã Loaded settings: templateId=$currentTemplateId, interval=$intervalSeconds, maxRetry=$maxRetryAttempts, retryDelay=$retryDelaySeconds")

                    // Kh·ªüi t·∫°o notification v·ªõi m·ª©c ƒë·ªô ∆∞u ti√™n cao h∆°n
                    try {
                        val notification = createHiddenNotification()
                        Log.d(TAG, "üì≤ Starting foreground service with hidden notification")
                        startForeground(NOTIFICATION_ID, notification)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error creating notification", e)
                    }

                    // Th√™m m·ªôt delay nh·ªè tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ƒë·ªÉ ƒë·∫£m b·∫£o foreground service ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
                    serviceScope.launch {
                        try {
                            delay(500) // ƒê·ª£i 500ms
                            Log.d(TAG, "‚è±Ô∏è Starting SMS sending after delay")
                            startSendingSms()
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Error in delayed start", e)
                            sendCompletionBroadcast("L·ªói kh·ªüi ƒë·ªông d·ªãch v·ª•: ${e.message}")
                            stopSelf()
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error processing intent", e)
                    sendCompletionBroadcast("L·ªói x·ª≠ l√Ω intent: ${e.message}")
                    stopSelf()
                    return START_NOT_STICKY
                }
            } else {
                Log.w(TAG, "‚ö†Ô∏è onStartCommand called with null intent")
                stopSelf()
                return START_NOT_STICKY
            }
        } catch (e: Exception) {
            Log.e(TAG, "üí• Critical error in onStartCommand", e)
            try {
                sendCompletionBroadcast("L·ªói nghi√™m tr·ªçng: ${e.message}")
            } catch (e2: Exception) {
                Log.e(TAG, "Failed to send completion broadcast", e2)
            }
            stopSelf()
            return START_NOT_STICKY
        }

        return START_REDELIVER_INTENT
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "onDestroy called, ensuring completion broadcast is sent")

        serviceJob?.cancel()
        smsResultReceiver?.let { unregisterReceiver(it) }
        smsDeliveryReceiver?.let { unregisterReceiver(it) }
        pendingSmsResults.values.forEach { it.cancel() }
        pendingSmsResults.clear()
        pendingSmsDeliveries.clear()
        multipartMessageTracker.clear()
        isRunning = false
    }

    override fun onBind(intent: Intent?): IBinder? = null

    @RequiresPermission(Manifest.permission.READ_PHONE_STATE)
    private fun startSendingSms() {
        try {
            if (isRunning) {
                Log.w(TAG, "‚ö†Ô∏è SMS service is already running, ignoring new start request")
                return
            }

            // Reset all counters and states
            totalSent = 0
            totalToSend = 0
            Log.d(TAG, "üîÑ Reset SMS counters: totalSent=$totalSent, totalToSend=$totalToSend")

            isRunning = true

            // Ki·ªÉm tra c√†i ƒë·∫∑t thi·∫øt b·ªã tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            val deviceCheck = checkDeviceSettings()
            Log.i(TAG, "üîç Device check result: $deviceCheck")

            if (deviceCheck.contains("‚ùå")) {
                Log.e(TAG, "‚ùå Device check failed, stopping service")
                sendCompletionBroadcast("L·ªói thi·∫øt b·ªã: $deviceCheck")
                stopSelf()
                return
            }

            Log.d(TAG, "üöÄ Starting SMS sending process")

            val allCustomers = smsRepository.getCustomers()
            var customers = allCustomers.filter { it.isSelected }
            
            // √Åp d·ª•ng gi·ªõi h·∫°n kh√°ch h√†ng t·ª´ settings
            val settings = smsRepository.getAppSettings()
            if (settings.isLimitCustomer) {
                customers = customers.take(settings.customerLimit)
            } else {
                Log.d(TAG, "üîç Customer limit disabled in service - processing all ${customers.size} selected customers")
            }

            // Debug logs to check what's being loaded
            val allTemplates = smsRepository.getTemplates()
            val messageTemplates = smsRepository.getMessageTemplates()
            Log.d(TAG, "üìã Loaded ${allTemplates.size} templates: ${allTemplates.map { it.id }}")
            Log.d(TAG, "üìã Loaded ${messageTemplates.size} message templates: ${messageTemplates.map { it.id }}")
            Log.d(TAG, "üî¢ Current template ID: $currentTemplateId")

            // Check both template sources
            var template = smsRepository.getTemplates().find { it.id == currentTemplateId.toString() }

            // If template not found, try to get from message templates and convert
            if (template == null) {
                val messageTemplate = smsRepository.getMessageTemplates().find { it.id == currentTemplateId }
                if (messageTemplate != null) {
                    template = SmsTemplate(
                        id = messageTemplate.id.toString(),
                        name = messageTemplate.description,
                        content = messageTemplate.content
                    )
                    Log.d(TAG, "üîÑ Using converted message template: ${template.name}")
                }
            }

            if (customers.isEmpty()) {
                Log.e(TAG, "‚ùå No customers selected for SMS")
                sendCompletionBroadcast("‚ùå Kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ g·ª≠i SMS")
                stopSelf()
                return
            }

            if (template == null) {
                Log.e(TAG, "‚ùå Template ID $currentTemplateId not found")
                sendCompletionBroadcast("Kh√¥ng t√¨m th·∫•y template ID: $currentTemplateId")
                stopSelf()
                return
            }

            totalToSend = customers.size
            totalSent = 0


            serviceScope.launch {
                try {
                    withTimeout(10 * 60 * 1000L) {
                        sendSmsToCustomers(customers, template.content)
                    }
                } catch (e: TimeoutCancellationException) {
                    Log.e(TAG, "‚è∞ SMS sending timeout after 10 minutes")
                    sendCompletionBroadcast("‚è∞ Timeout: Qu√° tr√¨nh g·ª≠i SMS b·ªã d·ª´ng sau 10 ph√∫t")
                    stopSelf()
                } catch (e: Exception) {
                    Log.e(TAG, "üí• Critical error in SMS sending", e)
                    sendCompletionBroadcast("üí• L·ªói nghi√™m tr·ªçng: ${e.message}")
                    stopSelf()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error in startSendingSms", e)
            sendCompletionBroadcast("L·ªói b·∫Øt ƒë·∫ßu g·ª≠i SMS: ${e.message}")
            stopSelf()
        }
    }

    private suspend fun sendSmsToCustomers(customers: List<Customer>, templateContent: String) {
        try {

            // G·ª≠i broadcast ban ƒë·∫ßu ƒë·ªÉ UI bi·∫øt t·ªïng s·ªë ng∆∞·ªùi c·∫ßn g·ª≠i
            sendProgressBroadcast(0, totalToSend, "B·∫Øt ƒë·∫ßu g·ª≠i tin nh·∫Øn...")

            var totalRetries = 0
            val maxTotalRetries = maxRetryAttempts * 3


            val initialDelay = intervalSeconds * 1000L
            var remainingInitialDelay = initialDelay
            
            while (remainingInitialDelay > 0 && isRunning) {
                val delayStep = minOf(1000L, remainingInitialDelay)
                delay(delayStep)
                remainingInitialDelay -= delayStep
                
                // C·∫≠p nh·∫≠t notification m·ªói gi√¢y
                if (remainingInitialDelay % 1000 == 0L) {
                    val remainingSecs = remainingInitialDelay / 1000
                }
            }
            
            if (!isRunning) {
                return
            }



            var currentIndex = 0
            val shouldSendParallel = smsRepository.shouldSendParallelToDualSim(customers.size)
            Log.d(TAG, "üöÄ Starting SMS sending: ${customers.size} customers, shouldSendParallel: $shouldSendParallel")

            while (currentIndex < customers.size && isRunning) {
                val customer = customers[currentIndex]

                val currentTime = System.currentTimeMillis()
                try {
//                    // C·∫≠p nh·∫≠t notification ƒë·ªÉ gi·ªØ service trong foreground
//                    notificationManager.notify(
//                        NOTIFICATION_ID,
//                        createNotification("ƒêang g·ª≠i tin nh·∫Øn ${totalSent + 1}/${totalToSend}")
//                    )

                    val message = formatMessage(templateContent, customer)

                    // Ki·ªÉm tra xem c√≥ n√™n g·ª≠i song song 2 kh√°ch h√†ng v√†o 2 SIM kh√¥ng
                    if (shouldSendParallel) {
                        val (sim1, sim2) = smsRepository.getDualSimIds()
                    }

                    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c g·ª≠i SMS v·ªõi delivery report ƒë·ªÉ c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i
                    // L·∫•y SIM cho kh√°ch h√†ng n√†y (dual SIM ho·∫∑c single SIM)
                    val selectedSim = smsRepository.getSimForCustomer(currentIndex)

                    // Debug dual SIM
                    if (smsRepository.isDualSimEnabled()) {
                        val (sim1, sim2) = smsRepository.getDualSimIds()
                    }

                    var success = false
                    var retryCount = 0

                    while (!success && retryCount < maxRetryAttempts && totalRetries < maxTotalRetries && isRunning) {
                        try {
                            if (retryCount > 0) {
                                delay(retryDelaySeconds * 1000L)
                            }

                            if (shouldSendParallel && currentIndex < customers.size - 1) {
                                val nextCustomer = customers[currentIndex + 1]
                                val nextMessage = formatMessage(templateContent, nextCustomer)
                                val (sim1, sim2) = smsRepository.getDualSimIds()


                                val results = coroutineScope {
                                    val job1 = async { sendSmsWithDeliveryReport(customer.phoneNumber, message, sim1, customer) }
                                    val job2 = async { sendSmsWithDeliveryReport(nextCustomer.phoneNumber, nextMessage, sim2, nextCustomer) }
                                    job1.await() to job2.await()
                                }
                                val (success1, success2) = results
                                success = success1 && success2

                                if (success1) {
                                    deleteCustomerAfterSuccessfulSend(customer)
                                    val forceUpdatedCount1 = smsRepository.forceRefreshSmsCount(sim1)
                                    sendSmsCountUpdateBroadcast(sim1, forceUpdatedCount1)
                                }
                                if (success2) {
                                    deleteCustomerAfterSuccessfulSend(nextCustomer)
                                    val forceUpdatedCount2 = smsRepository.forceRefreshSmsCount(sim2)
                                    sendSmsCountUpdateBroadcast(sim2, forceUpdatedCount2)
                                }

                                if (success) {
                                    currentIndex += 2
                                }

                            } else {
                                success = sendSmsWithDeliveryReport(customer.phoneNumber, message, selectedSim, customer)
                            }

                            if (!success) {
                                retryCount++
                                totalRetries++
                            }
                        } catch (e: Exception) {
                            retryCount++
                            totalRetries++
                            delay(retryDelaySeconds * 1000L)
                        }
                    }

                    if (success) {
                        // Khai b√°o successMessage ·ªü ƒë·∫ßu ƒë·ªÉ tr√°nh l·ªói reassignment
                        val successMessage = if (shouldSendParallel && currentIndex < customers.size - 1) {
                            val nextCustomer = customers[currentIndex + 1]
                            "üîÑ ƒê√£ g·ª≠i song song: ${customer.name} ‚Üí SIM1, ${nextCustomer.name} ‚Üí SIM2"
                        } else {
                            "‚úÖ ƒê√£ g·ª≠i SMS cho ${customer.name} (${customer.phoneNumber})"
                        }
                        
                        if (shouldSendParallel && currentIndex < customers.size - 1) {
                            // ƒê√£ x·ª≠ l√Ω song song 2 kh√°ch h√†ng
                            totalSent += 2
                        } else {
                            // X·ª≠ l√Ω th√¥ng th∆∞·ªùng 1 kh√°ch h√†ng
                            totalSent++
                            // X√≥a kh√°ch h√†ng kh·ªèi danh s√°ch UI sau khi g·ª≠i th√†nh c√¥ng
                            deleteCustomerAfterSuccessfulSend(customer)


                            // TƒÉng s·ªë l∆∞·ª£ng SMS ƒë√£ g·ª≠i trong ng√†y (ch·ªâ cho single SIM mode)
                            val updatedCount = smsRepository.incrementSmsCount(selectedSim)
                            val forceUpdatedCount = smsRepository.forceRefreshSmsCount(selectedSim)

                            // Send broadcast to update UI with new SMS count
                            sendSmsCountUpdateBroadcast(selectedSim, forceUpdatedCount)
                        }

                        // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† kh√°ch h√†ng cu·ªëi c√πng kh√¥ng
                        val isLastCustomer = if (shouldSendParallel && currentIndex < customers.size - 1) {
                            currentIndex + 1 >= customers.size - 1
                        } else {
                            currentIndex >= customers.size - 1
                        }

                        // N·∫øu ƒë√¢y l√† kh√°ch h√†ng cu·ªëi c√πng, g·ª≠i completion broadcast ngay l·∫≠p t·ª©c
                        if (isLastCustomer) {
                            val failedCount = totalToSend - totalSent
                            if (failedCount == 0) {
                                val completionMessage = "üèÅ ƒê√£ ho√†n th√†nh g·ª≠i $totalSent/$totalToSend tin nh·∫Øn"
                                sendCompletionBroadcast(completionMessage)
                            }
                            Log.d(TAG, "üèÅ Sent immediate completion broadcast for last customer")
                        }

                        // Ch·ªâ ƒë·ª£i th√™m n·∫øu kh√¥ng ph·∫£i l√† kh√°ch h√†ng cu·ªëi c√πng
                        if (!isLastCustomer) {
                            // Dual SIM parallel mode: kh√¥ng delay ƒë·ªÉ g·ª≠i th·ª±c s·ª± song song
                            val effectiveInterval = if (shouldSendParallel) {
                                0 // Kh√¥ng delay cho parallel mode ƒë·ªÉ g·ª≠i th·ª±c s·ª± song song
                            } else if (smsRepository.isDualSimEnabled() && customers.size >= 2) {
                                maxOf(intervalSeconds / 2, 1) // Gi·∫£m m·ªôt n·ª≠a, t·ªëi thi·ªÉu 1 gi√¢y
                            } else {
                                intervalSeconds
                            }

                            val randomDelay = getRandomDelay(effectiveInterval)

                            // Ch·ªâ delay n·∫øu kh√¥ng ph·∫£i parallel mode
                            if (effectiveInterval > 0) {
                                // Chia nh·ªè th·ªùi gian ch·ªù ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i service th∆∞·ªùng xuy√™n h∆°n
                                val checkInterval = 1000L // 1 gi√¢y
                                var remainingDelay = randomDelay

                                while (remainingDelay > 0 && isRunning) {
                                    val delayStep = minOf(checkInterval, remainingDelay)
                                    delay(delayStep)
                                    remainingDelay -= delayStep

                                    // C·∫≠p nh·∫≠t notification ƒë·ªÉ gi·ªØ service trong foreground - th∆∞·ªùng xuy√™n h∆°n
                                    if (remainingDelay % 1000 == 0L) { // C·∫≠p nh·∫≠t m·ªói 1 gi√¢y
                                        val remainingSecs = remainingDelay / 1000
                                    val nextCustomerIndex = currentIndex + 1

                                    // T√≠nh t·ªïng th·ªùi gian c√≤n l·∫°i cho t·∫•t c·∫£ tin nh·∫Øn
                                    val remainingCustomers = totalToSend - totalSent
                                    // remainingCustomers bao g·ªìm c·∫£ customer hi·ªán t·∫°i ƒëang delay
                                    val totalRemainingSeconds = remainingSecs + ((remainingCustomers - 1) * intervalSeconds)
                                    val totalRemainingMinutes = totalRemainingSeconds / 60
                                    val totalRemainingSecsDisplay = totalRemainingSeconds % 60

                                    // C·∫≠p nh·∫≠t UI th√¥ng qua broadcast v·ªõi t·ªïng th·ªùi gian c√≤n l·∫°i
                                    val progressMessage = if (shouldSendParallel && nextCustomerIndex < customers.size - 1) {
                                        val nextCustomer = customers[nextCustomerIndex]
                                        val nextNextCustomer = customers[nextCustomerIndex + 1]
                                        if (remainingCustomers > 0) {
                                            "üîÑ C√≤n l·∫°i: ${remainingSecs}s tr∆∞·ªõc khi g·ª≠i song song cho ${nextCustomer.name} v√† ${nextNextCustomer.name} (T·ªïng: ${totalRemainingMinutes}m:${totalRemainingSecsDisplay}s)"
                                        } else {
                                            "üîÑ C√≤n l·∫°i: ${remainingSecs}s tr∆∞·ªõc khi g·ª≠i song song cho ${nextCustomer.name} v√† ${nextNextCustomer.name}"
                                        }
                                    } else if (nextCustomerIndex < customers.size) {
                                        val nextCustomer = customers[nextCustomerIndex]
                                        if (remainingCustomers > 0) {
                                            "C√≤n l·∫°i: ${remainingSecs}s tr∆∞·ªõc khi g·ª≠i cho ${nextCustomer.name} (T·ªïng: ${totalRemainingMinutes}m:${totalRemainingSecsDisplay}s)"
                                        } else {
                                            "C√≤n l·∫°i: ${remainingSecs}s tr∆∞·ªõc khi g·ª≠i cho ${nextCustomer.name}"
                                        }
                                    } else {
                                        "C√≤n l·∫°i: ${remainingSecs}s..."
                                    }

                                    sendProgressBroadcast(
                                        totalSent,
                                        totalToSend,
                                        progressMessage
                                    )
                                }
                            }

                            // Sau khi delay xong, g·ª≠i broadcast th√†nh c√¥ng
                            Log.d(TAG, "‚è∞ Delay period completed, sending success broadcast")
                            sendProgressBroadcast(
                                totalSent,
                                totalToSend,
                                successMessage
                            )
                            } else {
                                // Parallel mode: kh√¥ng delay, g·ª≠i broadcast ngay
                                Log.d(TAG, "üöÄ Parallel mode: No delay, sending success broadcast immediately")
                                sendProgressBroadcast(
                                    totalSent,
                                    totalToSend,
                                    successMessage
                                )
                            }
                        } else {
                            Log.d(TAG, "üèÅ ƒê√£ g·ª≠i tin nh·∫Øn cho kh√°ch h√†ng cu·ªëi c√πng, kh√¥ng c·∫ßn ƒë·ª£i th√™m")
                            // G·ª≠i broadcast ngay cho kh√°ch h√†ng cu·ªëi c√πng
                            sendProgressBroadcast(
                                totalSent,
                                totalToSend,
                                successMessage
                            )
                        }
                    } else {

                        val failureMessage = if (shouldSendParallel && currentIndex < customers.size - 1) {
                            val nextCustomer = customers[currentIndex + 1]
                            "‚ùå L·ªói g·ª≠i song song cho ${customer.name} v√† ${nextCustomer.name} sau $retryCount l·∫ßn th·ª≠ - Ti·∫øp t·ª•c v·ªõi ng∆∞·ªùi ti·∫øp theo"
                        } else {
                            "‚ùå L·ªói g·ª≠i ${customer.name} (${customer.phoneNumber}) sau $retryCount l·∫ßn th·ª≠ - Ti·∫øp t·ª•c v·ªõi ng∆∞·ªùi ti·∫øp theo"
                        }
                        
                        // KH√îNG x√≥a customer khi g·ª≠i th·∫•t b·∫°i
                        // Customer s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i trong danh s√°ch
                        Log.d(TAG, "üìã Customer ${customer.name} kept in list due to failed sending")
                        
                        // V·∫´n c·∫ßn delay tr∆∞·ªõc khi x·ª≠ l√Ω customer ti·∫øp theo
                        val isLastCustomer = currentIndex >= customers.size - 1
                        
                        if (!isLastCustomer) {
                            // Dual SIM parallel mode: kh√¥ng delay ƒë·ªÉ g·ª≠i th·ª±c s·ª± song song
                            val effectiveInterval = if (shouldSendParallel) {
                                0 // Kh√¥ng delay cho parallel mode
                            } else if (smsRepository.isDualSimEnabled() && customers.size >= 2) {
                                maxOf(intervalSeconds / 2, 1) // Gi·∫£m m·ªôt n·ª≠a, t·ªëi thi·ªÉu 1 gi√¢y
                            } else {
                                intervalSeconds
                            }

                            if (effectiveInterval > 0) {
                                val randomDelay = getRandomDelay(effectiveInterval)
                                Log.d(TAG, "‚è≥ Waiting ${randomDelay}ms before next customer (after failure, dual SIM: ${smsRepository.isDualSimEnabled()})...")
                                delay(randomDelay)
                            } else {
                                Log.d(TAG, "üöÄ Parallel mode: No delay after failure")
                            }
                            
                            // G·ª≠i broadcast sau khi delay xong
                            Log.d(TAG, "‚è∞ Failure delay completed, sending failure broadcast")
                            sendProgressBroadcast(
                                totalSent,
                                totalToSend,
                                failureMessage
                            )
                        } else {
                            // G·ª≠i broadcast ngay cho kh√°ch h√†ng cu·ªëi c√πng khi failed
                            sendProgressBroadcast(
                                totalSent,
                                totalToSend,
                                failureMessage
                            )
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "üí• Error processing customer ${customer.name} (${customer.phoneNumber})", e)

                    // KH√îNG D·ª™NG SERVICE - Ch·ªâ log l·ªói v√† ti·∫øp t·ª•c v·ªõi kh√°ch h√†ng ti·∫øp theo
                    Log.w(TAG, "‚ö†Ô∏è Exception for ${customer.name}, continuing with next customer")
                    
                    Log.e(TAG, "üí• Processing error for ${customer.name}: ${e.message}")

                    val exceptionMessage = if (shouldSendParallel && currentIndex < customers.size - 1) {
                        val nextCustomer = customers[currentIndex + 1]
                        "üí• L·ªói x·ª≠ l√Ω song song cho ${customer.name} v√† ${nextCustomer.name}: ${e.message} - Ti·∫øp t·ª•c v·ªõi ng∆∞·ªùi ti·∫øp theo"
                    } else {
                        "üí• L·ªói x·ª≠ l√Ω ${customer.name}: ${e.message} - Ti·∫øp t·ª•c v·ªõi ng∆∞·ªùi ti·∫øp theo"
                    }

                    // KH√îNG x√≥a customer khi c√≥ exception
                    // Customer s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i trong danh s√°ch
                    Log.d(TAG, "üìã Customer ${customer.name} kept in list due to processing exception")
                    
                    // V·∫´n c·∫ßn delay tr∆∞·ªõc khi x·ª≠ l√Ω customer ti·∫øp theo
                                            val isLastCustomer = currentIndex >= customers.size - 1
                    
                    if (!isLastCustomer) {
                        // Dual SIM parallel mode: kh√¥ng delay ƒë·ªÉ g·ª≠i th·ª±c s·ª± song song
                        val effectiveInterval = if (shouldSendParallel) {
                            0 // Kh√¥ng delay cho parallel mode
                        } else if (smsRepository.isDualSimEnabled() && customers.size >= 2) {
                            maxOf(intervalSeconds / 2, 1)
                        } else {
                            intervalSeconds
                        }

                        if (effectiveInterval > 0) {
                            val randomDelay = getRandomDelay(effectiveInterval)
                            Log.d(TAG, "‚è≥ Waiting ${randomDelay}ms before next customer (after exception, dual SIM: ${smsRepository.isDualSimEnabled()})...")
                            delay(randomDelay)
                        } else {
                            Log.d(TAG, "üöÄ Parallel mode: No delay after exception")
                        }
                        
                        // G·ª≠i broadcast sau khi delay xong
                        Log.d(TAG, "‚è∞ Exception delay completed, sending exception broadcast")
                        sendProgressBroadcast(
                            totalSent,
                            totalToSend,
                            exceptionMessage
                        )
                    } else {
                        // G·ª≠i broadcast ngay cho kh√°ch h√†ng cu·ªëi c√πng khi exception
                        sendProgressBroadcast(
                            totalSent,
                            totalToSend,
                            exceptionMessage
                        )
                    }
                }

                // Continue processing next customer
                Log.d(TAG, "üîÑ Finished processing customer ${customer.name}")

                // TƒÉng currentIndex ƒë·ªÉ x·ª≠ l√Ω kh√°ch h√†ng ti·∫øp theo
                // Trong parallel mode, currentIndex ƒë√£ ƒë∆∞·ª£c tƒÉng +2 trong logic g·ª≠i song song n·∫øu th√†nh c√¥ng
                // Ch·ªâ tƒÉng +1 n·∫øu kh√¥ng ph·∫£i parallel mode
                Log.d(TAG, "üîç Before increment: currentIndex=$currentIndex, shouldSendParallel=$shouldSendParallel, customers.size=${customers.size}")
                if (!shouldSendParallel) {
                    currentIndex++
                    Log.d(TAG, "‚û°Ô∏è Single mode: Moving to next customer: $currentIndex")
                } else {
                    Log.d(TAG, "‚è≠Ô∏è Parallel mode: currentIndex already handled in parallel logic")
                }
            }

            // Ho√†n th√†nh g·ª≠i SMS
            val failedCount = totalToSend - totalSent
            Log.i(TAG, "üèÅ SMS sending completed: $totalSent/$totalToSend messages sent, $failedCount failed")

            if (failedCount == 0) {
                val completionMessage = "üèÅ ƒê√£ ho√†n th√†nh g·ª≠i $totalSent/$totalToSend tin nh·∫Øn"
                sendCompletionBroadcast(completionMessage)
            }


            Log.d(TAG, "üèÅ SMS sending process completed")

            // D·ª´ng service sau khi g·ª≠i th√¥ng b√°o ho√†n th√†nh
            stopSelf()
        } catch (e: Exception) {
            Log.e(TAG, "üí• Critical error in sendSmsToCustomers", e)
            sendCompletionBroadcast("üí• L·ªói nghi√™m tr·ªçng: ${e.message}")
            Log.e(TAG, "Service stopping due to critical error")
            stopSelf()
        }
    }

    private suspend fun sendSmsWithDeliveryReport(
        phoneNumber: String,
        message: String,
        selectedSim: Int,
        customer: Customer
    ): Boolean = suspendCancellableCoroutine { continuation ->
        try {
            val requestId = "SMS_${System.currentTimeMillis()}_${phoneNumber.hashCode()}"
            
            // Apply deep cleaning for problematic numbers before sending
            val extraCleanedPhone = phoneNumber.trim()
                .replace(Regex("[^0-9+]"), "") // Remove non-digits
                .let { num ->
                    // Lu√¥n gi·ªØ ƒë·ªãnh d·∫°ng 0xxx, kh√¥ng chuy·ªÉn sang +84
                    if (num.startsWith("+84")) {
                        // Chuy·ªÉn +84 v·ªÅ 0
                        "0" + num.substring(3)
                    } else if (num.startsWith("84") && num.length >= 11) {
                        // Chuy·ªÉn 84 v·ªÅ 0
                        "0" + num.substring(2)
                    } else {
                        // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng 0xxx
                        num
                    }
                }
            
            Log.d(TAG, "üì± Original phone: $phoneNumber ‚Üí Cleaned: $extraCleanedPhone")
            
            // Get SIM manager info for debugging
            val subscription = if (selectedSim >= 0) {
                try {
                    val subscriptionManager = getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager
                    subscriptionManager.getActiveSubscriptionInfo(selectedSim)
                } catch (e: Exception) {
                    Log.w(TAG, "Cannot get subscription info: ${e.message}")
                    null
                }
            } else null
            
            // Try multiple SIM managers based on selection
            val smsManagers = mutableListOf<SmsManager>()
            
            if (selectedSim >= 0 && subscription != null) {
                try {
                    val simSpecificManager = SmsManager.getSmsManagerForSubscriptionId(subscription.subscriptionId)
                    smsManagers.add(simSpecificManager)
                    Log.d(TAG, "üì± Added SIM-specific manager for subscription: ${subscription.subscriptionId}")
                } catch (e: Exception) {
                    Log.w(TAG, "Cannot create SIM-specific manager: ${e.message}")
                }
            }
            
            // Always add default manager as fallback
            smsManagers.add(SmsManager.getDefault())
            
            // Ch·ªâ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 0xxx, kh√¥ng th·ª≠ +84
            val phoneFormats = listOf(
                extraCleanedPhone, // ƒê√£ ƒë∆∞·ª£c clean v√† ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng 0xxx
                phoneNumber.trim().let { original ->
                    // ƒê·∫£m b·∫£o original c≈©ng ·ªü ƒë·ªãnh d·∫°ng 0xxx
                    if (original.startsWith("+84")) {
                        "0" + original.substring(3)
                    } else if (original.startsWith("84") && original.length >= 11) {
                        "0" + original.substring(2)
                    } else {
                        original
                    }
                }
            ).distinct().filter { it.startsWith("0") } // Ch·ªâ gi·ªØ s·ªë b·∫Øt ƒë·∫ßu b·∫±ng 0
            
            Log.d(TAG, "üöÄ Sending SMS to: $phoneNumber ‚Üí $extraCleanedPhone")
            Log.d(TAG, "üì± Phone formats to try: $phoneFormats")
            Log.d(TAG, "üì± Will try ${smsManagers.size} managers with ${phoneFormats.size} formats = ${smsManagers.size * phoneFormats.size} total attempts")
            
            // Create all attempts
            val attempts = mutableListOf<SmsAttempt>()
            var attemptNumber = 1
            val maxAttempts = smsManagers.size * phoneFormats.size
            
            for ((managerIndex, smsManager) in smsManagers.withIndex()) {
                for ((formatIndex, phoneFormat) in phoneFormats.withIndex()) {
                    attempts.add(
                        SmsAttempt(
                            requestId = requestId,
                            phoneNumber = extraCleanedPhone,
                            message = message,
                            customer = customer,
                            smsManager = smsManager,
                            managerIndex = managerIndex + 1,
                            phoneFormat = phoneFormat,
                            formatIndex = formatIndex,
                            attemptNumber = attemptNumber,
                            maxAttempts = maxAttempts,
                            continuation = continuation
                        )
                    )
                    attemptNumber++
                }
            }
            
            // Store attempts in queue
            attemptQueue[requestId] = attempts
            
            // Store continuation for later use
            pendingSmsResults[requestId] = continuation
            Log.d(TAG, "üíæ Stored continuation for requestId: $requestId")
            
            // Start with first attempt
            executeNextAttempt(requestId)
            
            // Set up timeout mechanism
            CoroutineScope(Dispatchers.IO).launch {
                delay(30000) // 30 second timeout
                if (pendingSmsResults.containsKey(requestId)) {
                    attemptQueue.remove(requestId)
                    activeAttempts.remove(requestId)
                    val timeoutContinuation = pendingSmsResults.remove(requestId)
                    if (timeoutContinuation?.isActive == true) {
                        Log.e(TAG, "‚è∞ SMS sending timeout after 30 seconds for requestId: $requestId")
                        timeoutContinuation.resume(false)
                    }
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "üí• Critical SMS sending error", e)
            continuation.resume(false)
        }
    }
    
    private fun executeNextAttempt(requestId: String) {
        val queue = attemptQueue[requestId]
        if (queue.isNullOrEmpty()) {
            Log.e(TAG, "‚ùå No more attempts available for $requestId")
            return
        }
        
        val attempt = queue.removeAt(0)
        activeAttempts[requestId] = attempt
        
        Log.d(TAG, "üîß Executing attempt ${attempt.attemptNumber}/${attempt.maxAttempts}: Manager #${attempt.managerIndex} with phone: ${attempt.phoneFormat}")
        
        try {
            val attemptRequestId = "${requestId}_ATTEMPT_${attempt.attemptNumber}"
            
            val sentPendingIntent = PendingIntent.getBroadcast(
                this,
                attemptRequestId.hashCode(),
                Intent(SMS_SENT_ACTION).apply {
                    putExtra("REQUEST_ID", requestId)
                    putExtra("ATTEMPT_REQUEST_ID", attemptRequestId)
                    putExtra("PHONE_NUMBER", attempt.phoneFormat)
                    putExtra("CUSTOMER_NAME", attempt.customer.name)
                    putExtra("MANAGER_INDEX", attempt.managerIndex)
                    putExtra("ATTEMPT_COUNT", attempt.attemptNumber)
                    putExtra("MAX_ATTEMPTS", attempt.maxAttempts)
                },
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            val deliveredPendingIntent = PendingIntent.getBroadcast(
                this,
                (attemptRequestId + "_DELIVERED").hashCode(),
                Intent(SMS_DELIVERED_ACTION).apply {
                    putExtra("REQUEST_ID", requestId)
                    putExtra("PHONE_NUMBER", attempt.phoneFormat)
                    putExtra("CUSTOMER_NAME", attempt.customer.name)
                },
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            if (attempt.message.length > 160) {
                Log.d(TAG, "üìù Message longer than 160 chars, using divideMessage")
                val parts = attempt.smsManager.divideMessage(attempt.message)
                val sentIntents = ArrayList<PendingIntent>()
                val deliveredIntents = ArrayList<PendingIntent>()
                
                for (i in parts.indices) {
                    sentIntents.add(sentPendingIntent)
                    deliveredIntents.add(deliveredPendingIntent)
                }
                
                attempt.smsManager.sendMultipartTextMessage(
                    attempt.phoneFormat,
                    null,
                    parts,
                    sentIntents,
                    deliveredIntents
                )
                Log.d(TAG, "üì§ Sending multi-part SMS (${parts.size} parts)")
            } else {
                attempt.smsManager.sendTextMessage(
                    attempt.phoneFormat,
                    null,
                    attempt.message,
                    sentPendingIntent,
                    deliveredPendingIntent
                )
                Log.d(TAG, "üì§ Sending single SMS")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception during attempt ${attempt.attemptNumber}: ${e.message}")
            
            // Try next attempt after a short delay
            CoroutineScope(Dispatchers.IO).launch {
                delay(500)
                executeNextAttempt(requestId)
            }
        }
    }

    private fun formatMessage(template: String, customer: Customer): String {
        try {
            Log.d(TAG, "‚öôÔ∏è Formatting template: ${template.take(50)}${if (template.length > 50) "..." else ""}")
            Log.d(TAG, "üìã Customer data: ${customer.name}, ${customer.phoneNumber}, ${customer.idNumber}")

            // Format theo c√°c c·ªôt c·∫•u h√¨nh: xxx, yyy, sdt, ttt, zzz, www, uuu, vvv, rrr
            var message = template

            // C·ªôt 1: xxx - T√™n kh√°ch h√†ng
            // Handle all bracket types: {xxx}, [xxx], (xxx) - keep brackets, replace content
            message = message.replace("{xxx}", "{${customer.name}}")
                .replace("{XXX}", "{${customer.name}}")
                .replace("[xxx]", "[${customer.name}]")
                .replace("[XXX]", "[${customer.name}]")
                .replace("(xxx)", "(${customer.name})")
                .replace("(XXX)", "(${customer.name})")
                .replace(" xxx", " " + customer.name) // Th√™m space tr∆∞·ªõc ƒë·ªÉ tr√°nh thay th·∫ø t·ª´ trong t·ª´ kh√°c
                .replace(" XXX", " " + customer.name)
                .replace("xxx ", customer.name + " ")
                .replace("XXX ", customer.name + " ")
                .replace("\nxxx", "\n" + customer.name)
                .replace("\nXXX", "\n" + customer.name)
                // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi text
                .replace("xxx\n", customer.name + "\n")
                .replace("XXX\n", customer.name + "\n")

            // Ki·ªÉm tra tr∆∞·ªùng h·ª£p "xxx" ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi chu·ªói
            if (message.startsWith("xxx")) {
                message = customer.name + message.substring(3)
            }
            if (message.startsWith("XXX")) {
                message = customer.name + message.substring(3)
            }

            if (message.endsWith("xxx")) {
                message = message.substring(0, message.length - 3) + customer.name
            }
            if (message.endsWith("XXX")) {
                message = message.substring(0, message.length - 3) + customer.name
            }

            Log.d(TAG, "üîç After xxx/XXX replacement: ${message.take(100)}${if (message.length > 100) "..." else ""}")

            // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
            val specialCases = arrayOf(
                "Hello xxx", "Hello XXX", "Xin ch√†o xxx", "Xin ch√†o XXX",
                "Hi xxx", "Hi XXX", "Ch√†o xxx", "Ch√†o XXX"
            )

            for (case in specialCases) {
                if (message.contains(case)) {
                    val prefix = case.substring(0, case.length - 3)
                    message = message.replace(case, "$prefix${customer.name}")
                }
            }

            // C·ªôt 2: yyy - IdNumber (CMND)
            // Handle all bracket types: {yyy}, [yyy], (yyy) - keep brackets, replace content
            message = message.replace("{yyy}", "{${customer.idNumber}}")
                .replace("{YYY}", "{${customer.idNumber}}")
                .replace("[yyy]", "[${customer.idNumber}]")
                .replace("[YYY]", "[${customer.idNumber}]")
                .replace("(yyy)", "(${customer.idNumber})")
                .replace("(YYY)", "(${customer.idNumber})")
                .replace(" yyy", " " + customer.idNumber)
                .replace(" YYY", " " + customer.idNumber)
                .replace("yyy ", customer.idNumber + " ")
                .replace("YYY ", customer.idNumber + " ")
                .replace("\nyyy", "\n" + customer.idNumber)
                .replace("\nYYY", "\n" + customer.idNumber)
                // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi text
                .replace("yyy\n", customer.idNumber + "\n")
                .replace("YYY\n", customer.idNumber + "\n")

            // Ki·ªÉm tra tr∆∞·ªùng h·ª£p "yyy" ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi chu·ªói
            if (message.startsWith("yyy")) {
                message = customer.idNumber + message.substring(3)
            }
            if (message.startsWith("YYY")) {
                message = customer.idNumber + message.substring(3)
            }

            if (message.endsWith("yyy")) {
                message = message.substring(0, message.length - 3) + customer.idNumber
            }
            if (message.endsWith("YYY")) {
                message = message.substring(0, message.length - 3) + customer.idNumber
            }

            // C·ªôt 3: sdt - S·ªë ƒëi·ªán tho·∫°i
            // Handle all bracket types: {sdt}, [sdt], (sdt) - keep brackets, replace content
            message = message.replace("{sdt}", "{${customer.phoneNumber}}")
                .replace("{SDT}", "{${customer.phoneNumber}}")
                .replace("{SƒêT}", "{${customer.phoneNumber}}")
                .replace("[sdt]", "[${customer.phoneNumber}]")
                .replace("[SDT]", "[${customer.phoneNumber}]")
                .replace("[SƒêT]", "[${customer.phoneNumber}]")
                .replace("(sdt)", "(${customer.phoneNumber})")
                .replace("(SDT)", "(${customer.phoneNumber})")
                .replace("(SƒêT)", "(${customer.phoneNumber})")
                .replace(" sdt", " " + customer.phoneNumber)
                .replace(" SDT", " " + customer.phoneNumber)
                .replace(" SƒêT", " " + customer.phoneNumber)
                .replace("sdt ", customer.phoneNumber + " ")
                .replace("SDT ", customer.phoneNumber + " ")
                .replace("SƒêT ", customer.phoneNumber + " ")

            // C·ªôt 4: ttt - ƒê·ªãa ch·ªâ
            // Handle all bracket types: {ttt}, [ttt], (ttt) - keep brackets, replace content
            message = message.replace("{ttt}", "{${customer.address}}")
                .replace("{TTT}", "{${customer.address}}")
                .replace("[ttt]", "[${customer.address}]")
                .replace("[TTT]", "[${customer.address}]")
                .replace("(ttt)", "(${customer.address})")
                .replace("(TTT)", "(${customer.address})")
                .replace(" ttt", " " + customer.address)
                .replace(" TTT", " " + customer.address)
                .replace("ttt ", customer.address + " ")
                .replace("TTT ", customer.address + " ")

            // C·ªôt 5-9: zzz, www, uuu, vvv, rrr - C√°c tr∆∞·ªùng t√πy ch·ªçn 1-5
            // Handle all bracket types: {zzz}, [zzz], (zzz) - keep brackets, replace content
            message = message.replace("{zzz}", "{${customer.option1 ?: ""}}")
                .replace("{ZZZ}", "{${customer.option1 ?: ""}}")
                .replace("[zzz]", "[${customer.option1 ?: ""}]")
                .replace("[ZZZ]", "[${customer.option1 ?: ""}]")
                .replace("(zzz)", "(${customer.option1 ?: ""})")
                .replace("(ZZZ)", "(${customer.option1 ?: ""})")
                .replace(" zzz", " " + (customer.option1 ?: ""))
                .replace(" ZZZ", " " + (customer.option1 ?: ""))
                .replace("zzz ", (customer.option1 ?: "") + " ")
                .replace("ZZZ ", (customer.option1 ?: "") + " ")

            // Handle all bracket types: {www}, [www], (www) - keep brackets, replace content
            message = message.replace("{www}", "{${customer.option2 ?: ""}}")
                .replace("{WWW}", "{${customer.option2 ?: ""}}")
                .replace("[www]", "[${customer.option2 ?: ""}]")
                .replace("[WWW]", "[${customer.option2 ?: ""}]")
                .replace("(www)", "(${customer.option2 ?: ""})")
                .replace("(WWW)", "(${customer.option2 ?: ""})")
                .replace(" www", " " + (customer.option2 ?: ""))
                .replace(" WWW", " " + (customer.option2 ?: ""))
                .replace("www ", (customer.option2 ?: "") + " ")
                .replace("WWW ", (customer.option2 ?: "") + " ")

            // Handle all bracket types: {uuu}, [uuu], (uuu) - keep brackets, replace content
            message = message.replace("{uuu}", "{${customer.option3 ?: ""}}")
                .replace("{UUU}", "{${customer.option3 ?: ""}}")
                .replace("[uuu]", "[${customer.option3 ?: ""}]")
                .replace("[UUU]", "[${customer.option3 ?: ""}]")
                .replace("(uuu)", "(${customer.option3 ?: ""})")
                .replace("(UUU)", "(${customer.option3 ?: ""})")
                .replace(" uuu", " " + (customer.option3 ?: ""))
                .replace(" UUU", " " + (customer.option3 ?: ""))
                .replace("uuu ", (customer.option3 ?: "") + " ")
                .replace("UUU ", (customer.option3 ?: "") + " ")

            // Handle all bracket types: {vvv}, [vvv], (vvv) - keep brackets, replace content
            message = message.replace("{vvv}", "{${customer.option4 ?: ""}}")
                .replace("{VVV}", "{${customer.option4 ?: ""}}")
                .replace("[vvv]", "[${customer.option4 ?: ""}]")
                .replace("[VVV]", "[${customer.option4 ?: ""}]")
                .replace("(vvv)", "(${customer.option4 ?: ""})")
                .replace("(VVV)", "(${customer.option4 ?: ""})")
                .replace(" vvv", " " + (customer.option4 ?: ""))
                .replace(" VVV", " " + (customer.option4 ?: ""))
                .replace("vvv ", (customer.option4 ?: "") + " ")
                .replace("VVV ", (customer.option4 ?: "") + " ")

            // Handle all bracket types: {rrr}, [rrr], (rrr) - keep brackets, replace content
            message = message.replace("{rrr}", "{${customer.option5 ?: ""}}")
                .replace("{RRR}", "{${customer.option5 ?: ""}}")
                .replace("[rrr]", "[${customer.option5 ?: ""}]")
                .replace("[RRR]", "[${customer.option5 ?: ""}]")
                .replace("(rrr)", "(${customer.option5 ?: ""})")
                .replace("(RRR)", "(${customer.option5 ?: ""})")
                .replace(" rrr", " " + (customer.option5 ?: ""))
                .replace(" RRR", " " + (customer.option5 ?: ""))
                .replace("rrr ", (customer.option5 ?: "") + " ")
                .replace("RRR ", (customer.option5 ?: "") + " ")

            // ƒê·ªìng th·ªùi v·∫´n gi·ªØ c√°ch thay th·∫ø bi·∫øn c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
            message = message.replace("{ten}", customer.name)
                .replace("{TEN}", customer.name)
                .replace("{T√™n}", customer.name)
                .replace("{t√™n}", customer.name)

            message = message.replace("{cmnd}", customer.idNumber)
                .replace("{CMND}", customer.idNumber)
                .replace("{Cmnd}", customer.idNumber)

            message = message.replace("{diachi}", customer.address)
                .replace("{DIACHI}", customer.address)
                .replace("{Diachi}", customer.address)
                .replace("{ƒë·ªãa ch·ªâ}", customer.address)
                .replace("{ƒê·ªãa ch·ªâ}", customer.address)
                .replace("{ƒê·ªäA CH·ªà}", customer.address)

            message = message.replace("{option1}", customer.option1 ?: "")
                .replace("{OPTION1}", customer.option1 ?: "")

            message = message.replace("{option2}", customer.option2 ?: "")
                .replace("{OPTION2}", customer.option2 ?: "")

            message = message.replace("{option3}", customer.option3 ?: "")
                .replace("{OPTION3}", customer.option3 ?: "")

            message = message.replace("{option4}", customer.option4 ?: "")
                .replace("{OPTION4}", customer.option4 ?: "")

            message = message.replace("{option5}", customer.option5 ?: "")
                .replace("{OPTION5}", customer.option5 ?: "")

            // Th√™m th·ªùi gian hi·ªán t·∫°i n·∫øu c·∫ßn
            val currentDate = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault()).format(java.util.Date())
            val currentTime = java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault()).format(java.util.Date())

            message = message.replace("{ngay}", currentDate)
                .replace("{NGAY}", currentDate)
                .replace("{Ng√†y}", currentDate)
                .replace("{ng√†y}", currentDate)
                .replace("{gio}", currentTime)
                .replace("{GIO}", currentTime)
                .replace("{Gi·ªù}", currentTime)
                .replace("{gi·ªù}", currentTime)

            // Th√™m random emoji v√†o cu·ªëi tin nh·∫Øn n·∫øu tin nh·∫Øn c√≥ ƒë√°nh d·∫•u {emoji}
            if (message.contains("{emoji}")) {
                val emojis = listOf("üëã", "üëç", "‚úÖ", "üéâ", "üëå", "üòä", "üôÇ", "üíØ", "‚≠ê", "‚ú®")
                val randomEmoji = emojis.random()
                message = message.replace("{emoji}", randomEmoji)
            }

            Log.d(TAG, "‚úÖ Formatted result: ${message.take(50)}${if (message.length > 50) "..." else ""}")
            return message
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error formatting message: ${e.message}", e)
            return template // Return original template if formatting fails
        }
    }


    private fun createHiddenNotification(): android.app.Notification {
        createNotificationChannel()

        val notificationIntent = Intent(this, com.example.sms_app.presentation.activity.MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP
        }

        val pendingIntentFlags = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        } else {
            PendingIntent.FLAG_UPDATE_CURRENT
        }

        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            notificationIntent,
            pendingIntentFlags
        )

        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("")
            .setContentText("")
            .setSmallIcon(android.R.color.transparent)
            .setContentIntent(pendingIntent)
            .setPriority(NotificationCompat.PRIORITY_MIN)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setOngoing(false)
            .setVisibility(NotificationCompat.VISIBILITY_SECRET)
            .setSilent(true)
            .setShowWhen(false)
            .build()
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SMS Service Channel"
            val descriptionText = "Channel for SMS Service"
            val importance = NotificationManager.IMPORTANCE_HIGH // TƒÉng m·ª©c ƒë·ªô ∆∞u ti√™n
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
                lockscreenVisibility = Notification.VISIBILITY_PRIVATE // Hi·ªÉn th·ªã tr√™n m√†n h√¨nh kh√≥a
                setShowBadge(true) // Hi·ªÉn th·ªã badge tr√™n icon
                enableLights(true) // B·∫≠t ƒë√®n th√¥ng b√°o
                lightColor = android.graphics.Color.BLUE
                enableVibration(true) // B·∫≠t rung
                vibrationPattern = longArrayOf(0, 1000, 500, 1000) // M·∫´u rung
            }

//            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
//            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun sendProgressBroadcast(progress: Int, total: Int, message: String) {
        val intent = Intent(ACTION_PROGRESS_UPDATE).apply {
            putExtra(EXTRA_PROGRESS, progress)
            putExtra(EXTRA_TOTAL, total)
            putExtra(EXTRA_MESSAGE, message)
        }
        sendBroadcast(intent)
    }

    private fun sendCompletionBroadcast(message: String) {
        try {
            Log.d(TAG, "üì£ Sending completion broadcast: $message")

            // T·∫°o intent v·ªõi th√¥ng tin
            val intent = Intent(ACTION_SMS_COMPLETED).apply {
                putExtra(EXTRA_MESSAGE, message)
                addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)
            }

            // G·ª≠i broadcast tr√™n main thread ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô tin c·∫≠y
            Handler(Looper.getMainLooper()).post {
                try {
                    sendBroadcast(intent)
                    Log.d(TAG, "üì£ Sent completion broadcast on main thread")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error sending completion broadcast on main thread", e)
                }
            }

            // Th√™m c∆° ch·∫ø th·ª≠ l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    applicationContext.sendBroadcast(intent)
                    Log.d(TAG, "üì£ Sent completion broadcast again after delay")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error sending delayed completion broadcast", e)
                }
            }, 500) // Th·ª≠ l·∫°i sau 500ms

            // Th·ª≠ l·∫°i l·∫ßn th·ª© 3 v·ªõi context kh√°c
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    val newIntent = Intent(ACTION_SMS_COMPLETED).apply {
                        putExtra(EXTRA_MESSAGE, message)
                        addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)
                        addFlags(Intent.FLAG_RECEIVER_FOREGROUND)
                    }
                    applicationContext.sendBroadcast(newIntent)
                    Log.d(TAG, "üì£ Sent completion broadcast third attempt")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error sending third completion broadcast", e)
                }
            }, 1000) // Th·ª≠ l·∫°i sau 1 gi√¢y
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Critical error in sendCompletionBroadcast", e)
        }
    }

    @SuppressLint("UnspecifiedRegisterReceiverFlag")
    private fun setupSmsResultReceiver() {
        smsResultReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {
                val requestId = intent.getStringExtra("REQUEST_ID") ?: return
                val partId = intent.getStringExtra("PART_ID")
                val totalParts = intent.getIntExtra("TOTAL_PARTS", 0)
                val partIndex = intent.getIntExtra("PART_INDEX", -1)
                val continuation = pendingSmsResults[requestId]

                when (intent.action) {
                    SMS_SENT_ACTION -> {
                        val requestId = intent.getStringExtra("REQUEST_ID") ?: return
                        val attemptRequestId = intent.getStringExtra("ATTEMPT_REQUEST_ID") ?: requestId
                        val phoneNumber = intent.getStringExtra("PHONE_NUMBER") ?: "Unknown"
                        val customerName = intent.getStringExtra("CUSTOMER_NAME") ?: "Unknown"
                        val managerIndex = intent.getIntExtra("MANAGER_INDEX", 0)
                        val attemptCount = intent.getIntExtra("ATTEMPT_COUNT", 0)
                        val maxAttempts = intent.getIntExtra("MAX_ATTEMPTS", 0)
                        
                        when (resultCode) {
                            Activity.RESULT_OK -> {
                                Log.d(TAG, "‚úÖ SMS sent successfully! (Attempt $attemptCount/$maxAttempts, Manager #$managerIndex)")
                                
                                // Success! Clean up and resume continuation
                                val attempt = activeAttempts.remove(requestId)
                                attemptQueue.remove(requestId)
                                val continuation = pendingSmsResults.remove(requestId)
                                
                                if (continuation != null) {
                                    Log.d(TAG, "üì§ SMS sent (requestId: $requestId, success: true)")
                                    continuation.resume(true)
                                } else {
                                    Log.w(TAG, "‚ö†Ô∏è No continuation found for successful SMS: $requestId")
                                }
                            }
                            SmsManager.RESULT_ERROR_GENERIC_FAILURE -> {
                                Log.e(TAG, "‚ùå SMS sending failed: Generic failure (Attempt $attemptCount/$maxAttempts, Manager #$managerIndex)")
                                
                                // Get additional system information for debugging
                                val telephonyManager = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
                                val networkOperator = try {
                                    telephonyManager.networkOperatorName ?: "Unknown"
                                } catch (e: Exception) {
                                    "Error getting operator: ${e.message}"
                                }
                                
                                val simState = try {
                                    when (telephonyManager.simState) {
                                        TelephonyManager.SIM_STATE_ABSENT -> "ABSENT"
                                        TelephonyManager.SIM_STATE_NETWORK_LOCKED -> "NETWORK_LOCKED"
                                        TelephonyManager.SIM_STATE_PIN_REQUIRED -> "PIN_REQUIRED"
                                        TelephonyManager.SIM_STATE_PUK_REQUIRED -> "PUK_REQUIRED"
                                        TelephonyManager.SIM_STATE_READY -> "READY"
                                        TelephonyManager.SIM_STATE_UNKNOWN -> "UNKNOWN"
                                        else -> "OTHER"
                                    }
                                } catch (e: Exception) {
                                    "Error getting SIM state: ${e.message}"
                                }


                                // Check if there are more attempts to try
                                val queue = attemptQueue[requestId]
                                if (queue != null && queue.isNotEmpty()) {
                                    // Try next attempt after a short delay
                                    Log.d(TAG, "üîÑ ${queue.size} attempts remaining, trying next...")
                                    
                                    CoroutineScope(Dispatchers.IO).launch {
                                        delay(1000) // Wait 1 second before next attempt
                                        
                                                                                 executeNextAttempt(requestId)
                                    }
                                } else {
                                    // No more attempts, fail
                                    Log.e(TAG, "üí• All attempts exhausted. SMS sending failed.")
                                    
                                    val attempt = activeAttempts.remove(requestId)
                                    attemptQueue.remove(requestId)
                                    val continuation = pendingSmsResults.remove(requestId)
                                    
                                    if (continuation != null) {
                                        Log.d(TAG, "üì§ SMS sent (requestId: $requestId, success: false)")
                                        continuation.resume(false)
                                    } else {
                                        Log.w(TAG, "‚ö†Ô∏è No continuation found for failed SMS: $requestId")
                                    }
                                }
                            }
                            SmsManager.RESULT_ERROR_NO_SERVICE,
                            SmsManager.RESULT_ERROR_NULL_PDU,
                            SmsManager.RESULT_ERROR_RADIO_OFF -> {
                                val errorType = when (resultCode) {
                                    SmsManager.RESULT_ERROR_NO_SERVICE -> "No service"
                                    SmsManager.RESULT_ERROR_NULL_PDU -> "Null PDU"
                                    SmsManager.RESULT_ERROR_RADIO_OFF -> "Radio off"
                                    else -> "Unknown error $resultCode"
                                }
                                
                                Log.e(TAG, "‚ùå SMS sending failed: $errorType (Attempt $attemptCount/$maxAttempts, Manager #$managerIndex)")
                                
                                // For these errors, we should fail immediately as they indicate system issues
                                val attempt = activeAttempts.remove(requestId)
                                attemptQueue.remove(requestId)
                                val continuation = pendingSmsResults.remove(requestId)
                                
                                if (continuation != null) {
                                    Log.d(TAG, "üì§ SMS sent (requestId: $requestId, success: false) - System error")
                                    continuation.resume(false)
                                } else {
                                    Log.w(TAG, "‚ö†Ô∏è No continuation found for failed SMS (system error): $requestId")
                                }
                            }
                            else -> {
                                Log.e(TAG, "‚ùå SMS sending failed: Unknown error code $resultCode (Attempt $attemptCount/$maxAttempts, Manager #$managerIndex)")
                                
                                // Check if there are more attempts to try
                                val queue = attemptQueue[requestId]
                                if (queue != null && queue.isNotEmpty()) {
                                    Log.d(TAG, "üîÑ Unknown error, trying next attempt...")
                                    
                                    CoroutineScope(Dispatchers.IO).launch {
                                        delay(1000)
                                        executeNextAttempt(requestId)
                                    }
                                } else {
                                    val attempt = activeAttempts.remove(requestId)
                                    attemptQueue.remove(requestId)
                                    val continuation = pendingSmsResults.remove(requestId)
                                    
                                    if (continuation != null) {
                                        continuation.resume(false)
                                    } else {
                                        Log.w(TAG, "‚ö†Ô∏è No continuation found for failed SMS (unknown error): $requestId")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        val filter = IntentFilter().apply {
            addAction(SMS_SENT_ACTION)
        }

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                registerReceiver(smsResultReceiver, filter, Context.RECEIVER_NOT_EXPORTED)
            } else {
                registerReceiver(smsResultReceiver, filter)
            }
            Log.d(TAG, "‚úÖ SMS result receiver registered successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Failed to register SMS result receiver", e)
        }
    }

    @SuppressLint("UnspecifiedRegisterReceiverFlag")
    private fun setupSmsDeliveryReceiver() {
        smsDeliveryReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {
                val requestId = intent.getStringExtra("REQUEST_ID") ?: return
                val customerId = intent.getStringExtra("CUSTOMER_ID") ?: return

                when (intent.action) {
                    SMS_DELIVERED_ACTION -> {
                        val resultCode = resultCode
                        when (resultCode) {
                            Activity.RESULT_OK -> {
                                Log.d(TAG, "‚úÖ SMS delivered successfully (requestId: $requestId)")

                                // L·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ map
                                val customer = pendingSmsDeliveries.remove(requestId)
                                if (customer != null) {
                                    Log.d(TAG, "‚úÖ SMS delivery confirmed for ${customer.name}")

                                    // G·ª≠i broadcast c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                                    sendProgressBroadcast(
                                        totalSent,
                                        totalToSend,
                                        "‚úÖ ƒê√£ x√°c nh·∫≠n g·ª≠i ƒë·∫øn ${customer.name} (${customer.phoneNumber})"
                                    )
                                } else {
                                    Log.w(TAG, "‚ö†Ô∏è Customer not found for requestId: $requestId")
                                }
                            }
                            Activity.RESULT_CANCELED -> {
                                Log.e(TAG, "‚ùå SMS delivery failed: Canceled (requestId: $requestId)")

                                Log.w(TAG, "SMS delivery failed for customer ID: $customerId")

                                // G·ª≠i broadcast c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                                sendProgressBroadcast(
                                    totalSent,
                                    totalToSend,
                                    "‚ùå SMS kh√¥ng ƒë·∫øn ƒë∆∞·ª£c ng∆∞·ªùi nh·∫≠n (requestId: $requestId)"
                                )
                            }
                            else -> {
                                Log.w(TAG, "‚ö†Ô∏è SMS delivery result unknown (resultCode: $resultCode, requestId: $requestId)")

                                // Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a sau khi g·ª≠i SMS th√†nh c√¥ng
                                val customer = pendingSmsDeliveries.remove(requestId)
                                if (customer != null) {
                                    Log.d(TAG, "SMS delivery status unknown for ${customer.name}")

                                    // G·ª≠i broadcast c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                                    sendProgressBroadcast(
                                        totalSent,
                                        totalToSend,
                                        "‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c k·∫øt qu·∫£ g·ª≠i ƒë·∫øn ${customer.name}"
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }

        val filter = IntentFilter().apply {
            addAction(SMS_DELIVERED_ACTION)
        }

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                registerReceiver(smsDeliveryReceiver, filter, Context.RECEIVER_NOT_EXPORTED)
            } else {
                registerReceiver(smsDeliveryReceiver, filter)
            }
            Log.d(TAG, "‚úÖ SMS delivery receiver registered successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Failed to register SMS delivery receiver", e)
        }
    }


    /**
     * Ki·ªÉm tra c√°c c√†i ƒë·∫∑t thi·∫øt b·ªã c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác g·ª≠i SMS
     */
    @RequiresPermission(Manifest.permission.READ_PHONE_STATE)
    private fun checkDeviceSettings(): String {
        val issues = mutableListOf<String>()

        try {
            // Ki·ªÉm tra quy·ªÅn SMS
            if (!hasRequiredPermissions(this)) {
                issues.add("‚ùå Thi·∫øu quy·ªÅn SMS")
            }

            // Ki·ªÉm tra tr·∫°ng th√°i m·∫°ng
            val telephonyManager = getSystemService(TELEPHONY_SERVICE) as TelephonyManager
            val networkState = telephonyManager.networkType
            if (networkState == TelephonyManager.NETWORK_TYPE_UNKNOWN) {
                issues.add("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i m·∫°ng")
            }

            // Ki·ªÉm tra SIM card
            val simState = telephonyManager.simState
            when (simState) {
                TelephonyManager.SIM_STATE_ABSENT -> issues.add("‚ùå Kh√¥ng c√≥ SIM card")
                TelephonyManager.SIM_STATE_NETWORK_LOCKED -> issues.add("‚ùå SIM b·ªã kh√≥a m·∫°ng")
                TelephonyManager.SIM_STATE_PIN_REQUIRED -> issues.add("‚ùå SIM y√™u c·∫ßu PIN")
                TelephonyManager.SIM_STATE_PUK_REQUIRED -> issues.add("‚ùå SIM y√™u c·∫ßu PUK")
                TelephonyManager.SIM_STATE_UNKNOWN -> issues.add("‚ö†Ô∏è Tr·∫°ng th√°i SIM kh√¥ng x√°c ƒë·ªãnh")
                TelephonyManager.SIM_STATE_READY -> Log.d(TAG, "‚úÖ SIM card s·∫µn s√†ng")
            }

            // Ki·ªÉm tra airplane mode
            val airplaneMode = Settings.Global.getInt(
                contentResolver,
                Settings.Global.AIRPLANE_MODE_ON,
                0
            ) != 0
            if (airplaneMode) {
                issues.add("‚ùå Ch·∫ø ƒë·ªô m√°y bay ƒëang b·∫≠t")
            }

            // Ki·ªÉm tra SmsManager
            try {
                val smsManager = SmsManager.getDefault()
                Log.d(TAG, "‚úÖ SmsManager kh·∫£ d·ª•ng")
            } catch (e: Exception) {
                issues.add("‚ùå Kh√¥ng th·ªÉ truy c·∫≠p SmsManager: ${e.message}")
            }

        } catch (e: Exception) {
            issues.add("‚ùå L·ªói ki·ªÉm tra thi·∫øt b·ªã: ${e.message}")
            Log.e(TAG, "Error checking device settings ${e.printStackTrace()}")
        }

        return if (issues.isEmpty()) {
            "‚úÖ Thi·∫øt b·ªã s·∫µn s√†ng g·ª≠i SMS"
        } else {
            "Ph√°t hi·ªán v·∫•n ƒë·ªÅ:\n${issues.joinToString("\n")}"
        }
    }

    /**
     * X√≥a kh√°ch h√†ng sau khi g·ª≠i SMS th√†nh c√¥ng v√† g·ª≠i broadcast th√¥ng b√°o
     */
    private fun deleteCustomerAfterSuccessfulSend(customer: Customer) {
        Log.d(TAG, "üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a kh√°ch h√†ng ${customer.name} (ID: ${customer.id})")

        // L·∫•y danh s√°ch kh√°ch h√†ng hi·ªán t·∫°i
        val currentCustomers = smsRepository.getCustomers()

        // Ki·ªÉm tra xem kh√°ch h√†ng c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
        val customerExists = currentCustomers.any { it.id == customer.id }
        if (!customerExists) {
            Log.w(TAG, "‚ö†Ô∏è Kh√°ch h√†ng ${customer.id} kh√¥ng t·ªìn t·∫°i trong danh s√°ch")
            return
        }

        // L·ªçc kh√°ch h√†ng ra kh·ªèi danh s√°ch
        val updatedCustomers = currentCustomers.filter { it.id != customer.id }

        // L∆∞u danh s√°ch m·ªõi
        smsRepository.saveCustomers(updatedCustomers)
        Log.d(TAG, "üíæ ƒê√£ l∆∞u danh s√°ch kh√°ch h√†ng m·ªõi (ƒë√£ x√≥a ${customer.id})")

        // Ki·ªÉm tra l·∫°i xem kh√°ch h√†ng ƒë√£ th·ª±c s·ª± b·ªã x√≥a ch∆∞a
        val checkCustomers = smsRepository.getCustomers()
        val stillExists = checkCustomers.any { it.id == customer.id }

        if (stillExists) {
            Log.e(TAG, "‚ùå Kh√°ch h√†ng ${customer.id} v·∫´n c√≤n t·ªìn t·∫°i sau khi x√≥a!")
        } else {
            Log.d(TAG, "‚úÖ ƒê√£ x√≥a th√†nh c√¥ng kh√°ch h√†ng ${customer.id}")

            // G·ª≠i broadcast th√¥ng b√°o ƒë√£ x√≥a kh√°ch h√†ng v·ªõi nhi·ªÅu c∆° ch·∫ø ƒë·∫£m b·∫£o
            val intent = Intent(ACTION_CUSTOMER_DELETED).apply {
                putExtra(EXTRA_CUSTOMER_ID, customer.id)
                putExtra(EXTRA_MESSAGE, "ƒê√£ x√≥a kh√°ch h√†ng ${customer.name} sau khi g·ª≠i SMS th√†nh c√¥ng")
                addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)
                addFlags(Intent.FLAG_RECEIVER_FOREGROUND)
            }
            
            // G·ª≠i broadcast ngay l·∫≠p t·ª©c
            try {
                sendBroadcast(intent)
                Log.d(TAG, "üì¢ ƒê√£ g·ª≠i broadcast x√≥a kh√°ch h√†ng v·ªõi ID: ${customer.id}")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå L·ªói g·ª≠i broadcast x√≥a kh√°ch h√†ng", e)
            }
            
            // G·ª≠i l·∫°i v·ªõi applicationContext
            try {
                applicationContext.sendBroadcast(intent)
                Log.d(TAG, "üì¢ ƒê√£ g·ª≠i broadcast x√≥a kh√°ch h√†ng qua applicationContext")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå L·ªói g·ª≠i broadcast qua applicationContext", e)
            }

            // ƒê·∫£m b·∫£o broadcast ƒë∆∞·ª£c g·ª≠i b·∫±ng c√°ch g·ª≠i th√™m m·ªôt l·∫ßn n·ªØa sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    val retryIntent = Intent(ACTION_CUSTOMER_DELETED).apply {
                        putExtra(EXTRA_CUSTOMER_ID, customer.id)
                        putExtra(EXTRA_MESSAGE, "ƒê√£ x√≥a kh√°ch h√†ng ${customer.name} sau khi g·ª≠i SMS th√†nh c√¥ng")
                        addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)
                        addFlags(Intent.FLAG_RECEIVER_FOREGROUND)
                    }
                    sendBroadcast(retryIntent)
                    applicationContext.sendBroadcast(retryIntent)
                    Log.d(TAG, "üì¢ G·ª≠i l·∫°i broadcast x√≥a kh√°ch h√†ng v·ªõi ID: ${customer.id}")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå L·ªói g·ª≠i l·∫°i broadcast x√≥a kh√°ch h√†ng", e)
                }
            }, 500)
        }
    }

    // M√©todo para enviar broadcast de atualiza√ß√£o de contagem de SMS
    private fun sendSmsCountUpdateBroadcast(simId: Int, smsCount: Int) {
        val intent = Intent(ACTION_SMS_COUNT_UPDATED).apply {
            putExtra(EXTRA_SIM_ID, simId)
            putExtra(EXTRA_SMS_COUNT, smsCount)
        }
        Log.d(TAG, "üì¢ Broadcasting SMS count update: SIM $simId, count $smsCount")
        sendBroadcast(intent)
    }

} 