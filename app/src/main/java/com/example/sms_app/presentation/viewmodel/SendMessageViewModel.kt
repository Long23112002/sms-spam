package com.example.sms_app.presentation.viewmodel

import android.app.Application
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Build
import android.os.CountDownTimer
import android.util.Log
import androidx.core.content.ContextCompat
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.example.sms_app.data.SmsProgress
import com.example.sms_app.data.Customer
import com.example.sms_app.data.MessageTemplate
import com.example.sms_app.data.SmsRepository
import com.example.sms_app.data.SessionBackup
import com.example.sms_app.presentation.component.formatDuration
import com.example.sms_app.service.SmsService
import com.example.sms_app.utils.SimInfo
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

@HiltViewModel
class SendMessageViewModel @Inject constructor(
    application: Application,
    private val smsRepository: SmsRepository,
) : AndroidViewModel(application) {

    private val _progress = MutableLiveData<SmsProgress>()
    val progress: LiveData<SmsProgress> = _progress

    private val _completion = MutableLiveData<String>()
    val completion: LiveData<String> = _completion

    private val _isSending = MutableLiveData<Boolean>()
    val isSending: LiveData<Boolean> = _isSending

    private val _millisUntilFinished = MutableLiveData<Long>(0)
    val millisUntilFinished: LiveData<Long> = _millisUntilFinished
    
    private var currentCountDownTimer: CountDownTimer? = null
    private var totalCustomers: Int = 0

    private val smsProgressReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            viewModelScope.launch(Dispatchers.IO) {
                Timber.tag(TAG).i("onReceive: action ${intent?.action}")
                when (intent?.action) {
                    SmsService.ACTION_PROGRESS_UPDATE -> {
                        intent.let {
                            val progress = it.getIntExtra(SmsService.EXTRA_PROGRESS, 0)
                            val total = it.getIntExtra(SmsService.EXTRA_TOTAL, 0)
                            val message = it.getStringExtra(SmsService.EXTRA_MESSAGE) ?: ""
                            val p = SmsProgress(progress, total, message)
                            Timber.tag(TAG).i("onReceive: SmsProgress $p")
                            _progress.postValue(p)
                            
                            // D·ª´ng countdown timer v√† k·∫øt th√∫c qu√° tr√¨nh g·ª≠i khi ƒë·∫°t 100%
                            if (progress >= total && total > 0) {
                                currentCountDownTimer?.cancel()
                                _millisUntilFinished.postValue(0L)
                                _isSending.postValue(false)
                                // X√≥a d·ªØ li·ªáu countdown ƒë√£ l∆∞u
                                smsRepository.clearCountdownData()
                                android.util.Log.d(TAG, "üóëÔ∏è Cleared countdown data on 100% progress")
                                android.util.Log.d(TAG, "üèÅ Countdown stopped and sending finished - reached 100% progress")
                            }
                            // X√≥a logic c·∫≠p nh·∫≠t countdown timer ƒë·ªÉ tr√°nh "gi·∫≠t gi·∫≠t"
                            // Countdown timer s·∫Ω t·ª± ch·∫°y t·ª´ startCountdownTimer()
                        }
                    }

                    SmsService.ACTION_SMS_COMPLETED -> {
                        val message =
                            intent.getStringExtra(SmsService.EXTRA_MESSAGE) ?: "Ho√†n th√†nh g·ª≠i SMS"

                        // D·ª´ng countdown timer khi ho√†n th√†nh
                        currentCountDownTimer?.cancel()
                        _millisUntilFinished.postValue(0L)
                        _isSending.postValue(false)

                        // X√≥a d·ªØ li·ªáu countdown ƒë√£ l∆∞u
                        smsRepository.clearCountdownData()
                        android.util.Log.d(TAG, "üóëÔ∏è Cleared countdown data on SMS completed")

                        // X√≥a session backup khi ho√†n th√†nh
                        val sessionBackup = SessionBackup(getApplication())
                        sessionBackup.completeSession()
                        android.util.Log.d(TAG, "üóëÔ∏è Completed and cleared session backup on SMS completed")

                        android.util.Log.d(TAG, "‚úÖ Setting completion message: $message")
                        _completion.postValue(message)
                    }
                }
            }
        }
    }

    init {
        IntentFilter().apply {
            addAction(SmsService.ACTION_PROGRESS_UPDATE)
            addAction(SmsService.ACTION_SMS_COMPLETED)
        }.let {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                application.registerReceiver(smsProgressReceiver, it, Context.RECEIVER_NOT_EXPORTED)
            } else {
                application.registerReceiver(smsProgressReceiver, it)
            }
        }
        
        // Kh√¥i ph·ª•c countdown timer n·∫øu service ƒëang ch·∫°y
        restoreCountdownIfServiceRunning()
    }
    
    private fun restoreCountdownIfServiceRunning() {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                // Clear any existing countdown data to prevent showing stale countdown state
                smsRepository.clearCountdownData()
                android.util.Log.d(TAG, "üóëÔ∏è Cleared any existing countdown data on ViewModel initialization")

                // Clear any active session backup to prevent completion state conflicts
                val sessionBackup = SessionBackup(getApplication())
                sessionBackup.clearActiveSession()
                android.util.Log.d(TAG, "üóëÔ∏è Cleared any active session backup on ViewModel initialization")

                // Reset states to initial values
                _isSending.postValue(false)
                _millisUntilFinished.postValue(0L)
                _completion.postValue(null)
                _progress.postValue(SmsProgress(0, 0, ""))

                android.util.Log.d(TAG, "üîÑ Reset all countdown states to initial values")
            } catch (e: Exception) {
                android.util.Log.e(TAG, "‚ùå Error clearing countdown data", e)
            }
        }
    }

    /**
     * Reset t·∫•t c·∫£ states v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
     */
    fun resetAllStates() {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                // D·ª´ng countdown timer n·∫øu c√≥
                currentCountDownTimer?.cancel()
                currentCountDownTimer = null

                // Reset t·∫•t c·∫£ states
                _isSending.postValue(false)
                _millisUntilFinished.postValue(0L)
                _progress.postValue(SmsProgress(0, 0, ""))
                _completion.postValue(null)

                // X√≥a d·ªØ li·ªáu ƒë√£ l∆∞u
                smsRepository.clearCountdownData()
                val sessionBackup = SessionBackup(getApplication())
                sessionBackup.clearActiveSession()

                android.util.Log.d(TAG, "üîÑ Reset all states to initial values")
            } catch (e: Exception) {
                android.util.Log.e(TAG, "‚ùå Error resetting states", e)
            }
        }
    }

    fun sendMessage(messageTemplate: MessageTemplate, simInfo: SimInfo) =
        viewModelScope.launch(Dispatchers.IO) {
            try {
                // Validate m·∫´u tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i
                if (messageTemplate.content.isBlank()) {
                    android.util.Log.e(TAG, "‚ùå Message template is empty")
                    withContext(Dispatchers.Main) {
                        _progress.value = SmsProgress(0, 0, "‚ùå Vui l√≤ng c·∫•u h√¨nh m·∫´u tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i!")
                    }
                    return@launch
                }

                android.util.Log.d(TAG, "‚úÖ Message template validated: ${messageTemplate.content.take(50)}...")

                // Reset t·∫•t c·∫£ states tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
                android.util.Log.d(TAG, "üîÑ Resetting all states before starting new SMS session")

                // D·ª´ng countdown timer n·∫øu c√≥
                currentCountDownTimer?.cancel()
                currentCountDownTimer = null

                // Clear any existing countdown data and session backup
                smsRepository.clearCountdownData()
                val sessionBackup = SessionBackup(getApplication())
                sessionBackup.clearActiveSession()

                // Reset t·∫•t c·∫£ states
                _isSending.postValue(false) // Set false tr∆∞·ªõc, sau ƒë√≥ set true
                _millisUntilFinished.postValue(0L)
                _progress.postValue(SmsProgress(0, 0, ""))
                _completion.postValue(null)

                android.util.Log.d(TAG, "‚úÖ All states reset, now starting SMS sending")
                _isSending.postValue(true)

                // Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu UI ƒë√£ ƒë∆∞·ª£c flush xu·ªëng repository
                kotlinx.coroutines.delay(100) // 100ms delay
                Log.d(TAG, "‚è≥ Added 100ms delay to ensure data is flushed to repository")

                // L·∫•y s·ªë l∆∞·ª£ng kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
                val allCustomers = smsRepository.getCustomers()
                var selectedCustomers = allCustomers.filter { it.isSelected }
                
                // Validation: Ki·ªÉm tra n·∫øu kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë∆∞·ª£c ch·ªçn
                if (selectedCustomers.isEmpty()) {
                    android.util.Log.d(TAG, "‚ùå No customers selected - aborting SMS sending")
                    _isSending.postValue(false)
                    _millisUntilFinished.postValue(0L)
                    _progress.postValue(SmsProgress(0, 0, ""))
                    // ƒê·∫£m b·∫£o kh√¥ng bao gi·ªù b√°o completion khi kh√¥ng c√≥ customers
                    _completion.postValue("‚ùå Kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ g·ª≠i SMS")
                    return@launch
                }
                
                // L·∫•y settings tr∆∞·ªõc
                val settings = smsRepository.getAppSettings()
                
                // Debug: Log settings values
                android.util.Log.d(TAG, "üîç DEBUG Customer Limit Settings:")
                android.util.Log.d(TAG, "   isLimitCustomer: ${settings.isLimitCustomer}")
                android.util.Log.d(TAG, "   customerLimit: ${settings.customerLimit}")
                android.util.Log.d(TAG, "   selectedCustomers.size: ${selectedCustomers.size}")
                android.util.Log.d(TAG, "   selectedCustomers: ${selectedCustomers.map { it.name }}")
                
                // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë kh√°ch h√†ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                android.util.Log.d(TAG, "üîç Checking customer limit: isLimitCustomer=${settings.isLimitCustomer}")
                
                if (settings.isLimitCustomer) {
                    android.util.Log.d(TAG, "üö´ Customer limit is ENABLED - applying limit of ${settings.customerLimit}")
                    android.util.Log.d(TAG, "üö´ Before limit: ${selectedCustomers.size} customers ‚Üí ${selectedCustomers.map { it.name }}")
                    
                    selectedCustomers = selectedCustomers.take(settings.customerLimit)
                    
                    android.util.Log.d(TAG, "‚úÇÔ∏è After limit: ${selectedCustomers.size} customers ‚Üí ${selectedCustomers.map { it.name }}")
                    
                    // Th√¥ng b√°o cho user bi·∫øt gi·ªõi h·∫°n ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng
                    withContext(Dispatchers.Main) {
                        android.widget.Toast.makeText(
                            getApplication<Application>(),
                            "‚ö†Ô∏è Gi·ªõi h·∫°n √°p d·ª•ng: Ch·ªâ g·ª≠i cho ${settings.customerLimit} kh√°ch h√†ng ƒë·∫ßu ti√™n",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                    }
                } else {
                    android.util.Log.d(TAG, "üîç Customer limit is DISABLED - sending to all selected customers")
                }
                
                totalCustomers = selectedCustomers.size
                android.util.Log.d(TAG, "üéØ FINAL: Will send SMS to ${selectedCustomers.size} customers: ${selectedCustomers.map { it.name }}")
                
                // Final validation: ƒê·∫£m b·∫£o v·∫´n c√≤n customers sau khi apply limit
                if (selectedCustomers.isEmpty()) {
                    android.util.Log.e(TAG, "‚ùå CRITICAL: No customers remaining after applying settings/limits")
                    withContext(Dispatchers.Main) {
                        android.widget.Toast.makeText(
                            getApplication<Application>(),
                            "‚ùå Kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë·ªÉ g·ª≠i sau khi √°p d·ª•ng c√†i ƒë·∫∑t",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                    }
                    _isSending.postValue(false)
                    _millisUntilFinished.postValue(0L)
                    _progress.postValue(SmsProgress(0, 0, ""))
                    _completion.postValue("‚ùå Kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë·ªÉ g·ª≠i SMS")
                    return@launch
                }
                
                Log.d(TAG, "ÔøΩÔøΩ SendMessage: Total customers: ${allCustomers.size}, Selected: $totalCustomers")
                
                // Debug: Hi·ªÉn th·ªã t·∫•t c·∫£ kh√°ch h√†ng v√† tr·∫°ng th√°i selection
                Log.d(TAG, "üîç ALL CUSTOMERS AND THEIR SELECTION STATUS:")
                allCustomers.forEachIndexed { index, customer ->
                    Log.d(TAG, "   $index. ${customer.name} (${customer.phoneNumber}) - isSelected: ${customer.isSelected}")
                }
                
                Log.d(TAG, "üéØ SELECTED CUSTOMERS (after limit check):")
                selectedCustomers.forEachIndexed { index, customer ->
                    Log.d(TAG, "   $index. ${customer.name} (${customer.phoneNumber})")
                }
                

                
                // Chuy·ªÉn sang main thread ƒë·ªÉ t·∫°o countdown timer v√† kh·ªüi ƒë·ªông service
                withContext(Dispatchers.Main) {
                    val application = getApplication<Application>()

                    // D·ª´ng service c≈© n·∫øu c√≥ tr∆∞·ªõc khi kh·ªüi ƒë·ªông m·ªõi
                    try {
                        application.stopService(Intent(application, SmsService::class.java))
                        android.util.Log.d(TAG, "üõë Stopped any existing SMS service before starting new one")
                        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o service ƒë√£ d·ª´ng ho√†n to√†n
                        kotlinx.coroutines.delay(500)
                    } catch (e: Exception) {
                        android.util.Log.w(TAG, "‚ö†Ô∏è Error stopping existing service: ${e.message}")
                    }

                    // B·∫Øt ƒë·∫ßu countdown timer v·ªõi t·ªïng th·ªùi gian
                    startCountdownTimer(totalCustomers, settings.intervalBetweenSmsSeconds)

                    smsRepository.setSelectedSim(simInfo.subscriptionId)
                    val intent = Intent(application, SmsService::class.java).apply {
                        putExtra(SmsService.EXTRA_TEMPLATE_ID, messageTemplate.id)
                        putExtra(SmsService.EXTRA_INTERVAL_SECONDS, settings.intervalBetweenSmsSeconds)
                        putExtra(SmsService.EXTRA_MAX_RETRY, settings.maxRetryAttempts)
                        putExtra(SmsService.EXTRA_RETRY_DELAY, settings.retryDelaySeconds)
                    }
                    ContextCompat.startForegroundService(application, intent)
                    android.util.Log.d(TAG, "üöÄ Started new SMS service")
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error in sendMessage", e)
                _isSending.postValue(false)
                _millisUntilFinished.postValue(0L)
                _progress.postValue(SmsProgress(0, 0, ""))
                _completion.postValue("‚ùå L·ªói khi g·ª≠i SMS: ${e.message}")
            }
        }

    private fun startCountdownTimer(totalCustomers: Int, intervalSeconds: Int) {
        try {
            // D·ª´ng timer c≈© n·∫øu c√≥
            currentCountDownTimer?.cancel()
            
            val safeIntervalSeconds = maxOf(intervalSeconds, 1) // ƒê·∫£m b·∫£o >= 1 gi√¢y
            
            // Ki·ªÉm tra s·ªë kh√°ch h√†ng th·ª±c t·∫ø
            Log.d(TAG, "üîç Countdown timer setup: $totalCustomers customers provided")
            
            if (totalCustomers <= 0) {
                Log.w(TAG, "‚ö†Ô∏è No customers selected for countdown timer")
                _millisUntilFinished.postValue(0L)
                _isSending.postValue(false)
                return
            }
            
            // T√≠nh t·ªïng th·ªùi gian: initial delay + (s·ªë tin nh·∫Øn - 1) √ó interval
            // C√≥ initial delay tr∆∞·ªõc tin nh·∫Øn ƒë·∫ßu ti√™n, sau ƒë√≥ delay gi·ªØa c√°c tin nh·∫Øn
            val totalTimeInSeconds = if (totalCustomers > 1) {
                // Initial delay + delay gi·ªØa c√°c tin nh·∫Øn = totalCustomers √ó interval
                totalCustomers * safeIntervalSeconds
            } else {
                // Ch·ªâ c√≥ 1 tin nh·∫Øn th√¨ c√≥ initial delay
                safeIntervalSeconds
            }
            val totalTimeInMillis = totalTimeInSeconds * 1000L
            
            Log.d(TAG, "üïí Starting countdown timer: $totalCustomers customers, ${safeIntervalSeconds}s interval")
            Log.d(TAG, "üïí Countdown calculation: ${if (totalCustomers > 1) "initial delay + (${totalCustomers - 1} √ó ${safeIntervalSeconds}s) = ${totalTimeInSeconds}s" else "${safeIntervalSeconds}s for single message (initial delay)"}")
            Log.d(TAG, "üïí Total countdown time: ${totalTimeInSeconds}s (${totalTimeInMillis}ms)")
            
            // L∆∞u th√¥ng tin countdown ƒë·ªÉ kh√¥i ph·ª•c sau n√†y
            val startTime = System.currentTimeMillis()
            viewModelScope.launch(Dispatchers.IO) {
                smsRepository.saveCountdownData(startTime, totalTimeInMillis, totalCustomers)
                android.util.Log.d(TAG, "üíæ Saved countdown data: start=$startTime, total=$totalTimeInMillis, customers=$totalCustomers")
            }
            
            // C·∫≠p nh·∫≠t gi√° tr·ªã ban ƒë·∫ßu ngay l·∫≠p t·ª©c
            _millisUntilFinished.postValue(totalTimeInMillis)
            
            currentCountDownTimer = object : CountDownTimer(totalTimeInMillis, 1000) {
                override fun onTick(millisUntilFinished: Long) {
                    try {
                        Log.d(TAG, "‚è∞ Countdown tick: ${millisUntilFinished}ms (${millisUntilFinished/1000}s)")
                        _millisUntilFinished.postValue(millisUntilFinished)
                    } catch (e: Exception) {
                        Log.e(TAG, "Error updating countdown timer", e)
                    }
                }

                override fun onFinish() {
                    try {
                        Log.d(TAG, "‚úÖ Countdown finished")
                        _millisUntilFinished.postValue(0L)
                        _isSending.postValue(false)
                        // X√≥a d·ªØ li·ªáu countdown ƒë√£ l∆∞u
                        viewModelScope.launch(Dispatchers.IO) {
                            smsRepository.clearCountdownData()
                            android.util.Log.d(TAG, "üóëÔ∏è Cleared countdown data on finish")
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "Error finishing countdown timer", e)
                    }
                }
            }
            currentCountDownTimer?.start()
            Log.d(TAG, "üöÄ Countdown timer started successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error starting countdown timer", e)
            // Fallback: set default values
            _millisUntilFinished.postValue(0L)
            _isSending.postValue(false)
        }
    }

    fun stop() = viewModelScope.launch(Dispatchers.IO) {
        android.util.Log.d(TAG, "üõë Stop button pressed - stopping SMS service")

        _isSending.postValue(false)

        // D·ª´ng countdown timer
        currentCountDownTimer?.cancel()
        currentCountDownTimer = null
        _millisUntilFinished.postValue(0L)

        // Reset progress state v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
        _progress.postValue(SmsProgress(0, 0, ""))

        android.util.Log.d(TAG, "üîÑ Reset progress states to initial values")

        // X√≥a d·ªØ li·ªáu countdown ƒë√£ l∆∞u
        smsRepository.clearCountdownData()
        android.util.Log.d(TAG, "üóëÔ∏è Cleared countdown data on stop")

        // X√≥a session backup khi d·ª´ng
        val sessionBackup = SessionBackup(getApplication())
        sessionBackup.clearActiveSession()
        android.util.Log.d(TAG, "üóëÔ∏è Cleared session backup on stop")

        // D·ª´ng service v√† g·ª≠i broadcast
        getApplication<Application>().let {
            it.stopService(
                Intent(it, SmsService::class.java).apply {
                    setAction("STOP_SMS_SERVICE")
                }
            )
        }

        android.util.Log.d(TAG, "‚úÖ Stop process completed")
    }

    override fun onCleared() {
        super.onCleared()
        // D·ª´ng countdown timer khi ViewModel b·ªã h·ªßy
        currentCountDownTimer?.cancel()
        currentCountDownTimer = null
        getApplication<Application>().unregisterReceiver(smsProgressReceiver)
    }

    companion object {
        private const val TAG = "SendMessageViewModel"
    }
}