package com.example.sms_app.utils

import android.content.Context
import android.util.Log
import com.example.sms_app.data.SmsRepository

/**
 * Utility class ƒë·ªÉ v√¥ hi·ªáu h√≥a ho√†n to√†n t·∫•t c·∫£ t√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS
 * v√† ki·ªÉm tra tr·∫°ng th√°i b·∫£o m·∫≠t c·ªßa ·ª©ng d·ª•ng
 */
object AutoSmsDisabler {
    private const val TAG = "AutoSmsDisabler"
    
    /**
     * V√¥ hi·ªáu h√≥a ho√†n to√†n t·∫•t c·∫£ t√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS
     */
    fun disableAllAutoSmsFeatures(context: Context): Boolean {
        return try {
            Log.d(TAG, "üö´ B·∫Øt ƒë·∫ßu v√¥ hi·ªáu h√≥a t·∫•t c·∫£ t√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS...")
            
            // 1. C·∫≠p nh·∫≠t settings ƒë·ªÉ t·∫Øt t·ª± ƒë·ªông g·ª≠i SMS
            val smsRepository = SmsRepository(context)
            val currentSettings = smsRepository.getAppSettings()
            val newSettings = currentSettings.copy(
                enableAutoSms = false,
                clearCacheAfterImport = true
            )
            smsRepository.saveAppSettings(newSettings)
            Log.d(TAG, "‚úÖ ƒê√£ t·∫Øt enableAutoSms trong settings")
            
            // 2. X√≥a t·∫•t c·∫£ cache
            val cacheManager = CacheManager(context)
            cacheManager.clearAllSmsCache()
            Log.d(TAG, "‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ cache SMS")
            
            // 3. Ghi log tr·∫°ng th√°i
            Log.d(TAG, "üéâ Ho√†n t·∫•t v√¥ hi·ªáu h√≥a t·∫•t c·∫£ t√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS")
            
            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå L·ªói khi v√¥ hi·ªáu h√≥a t√≠nh nƒÉng t·ª± ƒë·ªông", e)
            false
        }
    }
    
    /**
     * Ki·ªÉm tra tr·∫°ng th√°i b·∫£o m·∫≠t v√† c√°c t√≠nh nƒÉng t·ª± ƒë·ªông
     */
    fun checkSecurityStatus(context: Context): SecurityReport {
        return try {
            val issues = mutableListOf<String>()
            val warnings = mutableListOf<String>()
            val info = mutableListOf<String>()
            
            // 1. Ki·ªÉm tra HiddenSmsReceiver
            info.add("‚úÖ HiddenSmsReceiver ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a trong code")
            
            // 2. Ki·ªÉm tra settings
            val smsRepository = SmsRepository(context)
            val settings = smsRepository.getAppSettings()
            
            if (settings.enableAutoSms) {
                issues.add("‚ö†Ô∏è T√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS ƒëang B·∫¨T")
            } else {
                info.add("‚úÖ T√≠nh nƒÉng t·ª± ƒë·ªông g·ª≠i SMS ƒë√£ T·∫ÆT")
            }
            
            if (!settings.clearCacheAfterImport) {
                warnings.add("‚ö†Ô∏è Kh√¥ng t·ª± ƒë·ªông x√≥a cache sau import")
            } else {
                info.add("‚úÖ T·ª± ƒë·ªông x√≥a cache sau import ƒë√£ B·∫¨T")
            }
            
            // 3. Ki·ªÉm tra cache hi·ªán t·∫°i
            val cacheManager = CacheManager(context)
            val cacheStatus = cacheManager.checkForPotentialAutoSmsCache()
            if (cacheStatus.contains("‚ö†Ô∏è")) {
                warnings.add(cacheStatus)
            } else {
                info.add(cacheStatus)
            }
            
            // 4. Ki·ªÉm tra session backup
            val sessionBackup = com.example.sms_app.data.SessionBackup(context)
            val activeSession = sessionBackup.getActiveSession()
            if (activeSession != null) {
                warnings.add("‚ö†Ô∏è C√≥ active session v·ªõi ${activeSession.remainingCustomers.size} kh√°ch h√†ng")
            } else {
                info.add("‚úÖ Kh√¥ng c√≥ active session")
            }
            
            SecurityReport(
                issues = issues,
                warnings = warnings,
                info = info,
                isSecure = issues.isEmpty()
            )
            
        } catch (e: Exception) {
            Log.e(TAG, "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i b·∫£o m·∫≠t", e)
            SecurityReport(
                issues = listOf("‚ùå L·ªói khi ki·ªÉm tra: ${e.message}"),
                warnings = emptyList(),
                info = emptyList(),
                isSecure = false
            )
        }
    }
    
    /**
     * T·∫°o b√°o c√°o b·∫£o m·∫≠t chi ti·∫øt
     */
    fun generateSecurityReport(context: Context): String {
        val report = checkSecurityStatus(context)
        val sb = StringBuilder()
        
        sb.appendLine("üìã B√ÅO C√ÅO B·∫¢O M·∫¨T SMS APP")
        sb.appendLine("========================================")
        sb.appendLine()
        
        if (report.isSecure) {
            sb.appendLine("üîí TR·∫†NG TH√ÅI: AN TO√ÄN")
        } else {
            sb.appendLine("‚ö†Ô∏è TR·∫†NG TH√ÅI: C·∫¶N KH·∫ÆC PH·ª§C")
        }
        sb.appendLine()
        
        if (report.issues.isNotEmpty()) {
            sb.appendLine("üö® V·∫§N ƒê·ªÄ NGHI√äM TR·ªåNG:")
            report.issues.forEach { sb.appendLine("  $it") }
            sb.appendLine()
        }
        
        if (report.warnings.isNotEmpty()) {
            sb.appendLine("‚ö†Ô∏è C·∫¢NH B√ÅO:")
            report.warnings.forEach { sb.appendLine("  $it") }
            sb.appendLine()
        }
        
        if (report.info.isNotEmpty()) {
            sb.appendLine("‚ÑπÔ∏è TH√îNG TIN:")
            report.info.forEach { sb.appendLine("  $it") }
            sb.appendLine()
        }
        
        sb.appendLine("üõ°Ô∏è KHUY·∫æN NGH·ªä:")
        sb.appendLine("  1. Lu√¥n ki·ªÉm tra tr∆∞·ªõc khi import Excel")
        sb.appendLine("  2. Ch·ªâ g·ª≠i SMS khi ng∆∞·ªùi d√πng ch·ªß ƒë·ªông k√≠ch ho·∫°t")
        sb.appendLine("  3. X√≥a cache sau m·ªói l·∫ßn s·ª≠ d·ª•ng")
        sb.appendLine("  4. Ki·ªÉm tra log th∆∞·ªùng xuy√™n")
        
        return sb.toString()
    }
    
    /**
     * Kh·ªüi t·∫°o ·ª©ng d·ª•ng ·ªü ch·∫ø ƒë·ªô an to√†n
     */
    fun initializeSafeMode(context: Context): Boolean {
        return try {
            Log.d(TAG, "üõ°Ô∏è Kh·ªüi t·∫°o ·ª©ng d·ª•ng ·ªü ch·∫ø ƒë·ªô an to√†n...")
            
            // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ t√≠nh nƒÉng t·ª± ƒë·ªông
            val success = disableAllAutoSmsFeatures(context)
            
            if (success) {
                Log.d(TAG, "‚úÖ ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ·ªü ch·∫ø ƒë·ªô an to√†n")
            } else {
                Log.e(TAG, "‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o ch·∫ø ƒë·ªô an to√†n")
            }
            
            success
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå L·ªói khi kh·ªüi t·∫°o ch·∫ø ƒë·ªô an to√†n", e)
            false
        }
    }
}

/**
 * Data class ƒë·ªÉ l∆∞u tr·ªØ b√°o c√°o b·∫£o m·∫≠t
 */
data class SecurityReport(
    val issues: List<String>,      // V·∫•n ƒë·ªÅ nghi√™m tr·ªçng c·∫ßn kh·∫Øc ph·ª•c ngay
    val warnings: List<String>,    // C·∫£nh b√°o c·∫ßn ch√∫ √Ω
    val info: List<String>,        // Th√¥ng tin t√≠ch c·ª±c
    val isSecure: Boolean          // T·ªïng th·ªÉ c√≥ an to√†n kh√¥ng
)