package com.example.sms_app.presentation.component

import android.annotation.SuppressLint
import android.os.CountDownTimer
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.Message
import androidx.compose.material.icons.filled.Cake
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.SimCard
import androidx.compose.material.icons.filled.Warning
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.sms_app.data.SmsProgress
import com.example.sms_app.data.AppSettings
import com.example.sms_app.data.MessageTemplate
import com.example.sms_app.presentation.viewmodel.PatternViewModel
import com.example.sms_app.presentation.viewmodel.SendMessageViewModel
import com.example.sms_app.presentation.viewmodel.SettingViewModel
import com.example.sms_app.utils.SimInfo
import com.example.sms_app.utils.SimConfig
import com.example.sms_app.utils.SimManager

@SuppressLint("MissingPermission")
@Composable
fun SendMessageDialog(
    messageTemplate: MessageTemplate,
    simConfig: SimConfig,
    sendMessageViewModel: SendMessageViewModel,
    onDismissRequest: () -> Unit
) {
    val time = remember {
        mutableStateListOf<Long>().apply {
            for (i in 0..3) {
                add(0L)
            }
        }
    }
    val millisUntilFinished = sendMessageViewModel.millisUntilFinished.observeAsState(0L).value
    val isSending = sendMessageViewModel.isSending.observeAsState(false).value
    val progress = sendMessageViewModel.progress.observeAsState(SmsProgress()).value
    val completion = sendMessageViewModel.completion.observeAsState().value
    val context = LocalContext.current

    // Debug logging
    LaunchedEffect(millisUntilFinished) {
        android.util.Log.d(
            "SendMessageDialog",
            "üîÑ Countdown update: ${millisUntilFinished}ms (${millisUntilFinished / 1000}s)"
        )
    }

    // Gi·ªØ m√†n h√¨nh s√°ng khi ƒëang countdown/g·ª≠i SMS
    LaunchedEffect(isSending, millisUntilFinished) {
        if (isSending && millisUntilFinished > 0) {
            // Gi·ªØ m√†n h√¨nh s√°ng
            android.util.Log.d("SendMessageDialog", "üí° Keeping screen on during countdown/sending")
            if (context is android.app.Activity) {
                context.window.addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
            }
        } else {
            // T·∫Øt keep screen on khi ho√†n th√†nh
            android.util.Log.d("SendMessageDialog", "üí° Removing keep screen on flag")
            if (context is android.app.Activity) {
                context.window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
            }
        }
    }

    val formattedTime = try {
        millisUntilFinished.formatDuration()
    } catch (e: Exception) {
        listOf(0L, 0L, 0L, 0L)
    }

    time.apply {
        clear()
        addAll(formattedTime)
    }

    LaunchedEffect(Unit) {
        android.util.Log.d("SendMessageDialog", "üöÄ Dialog launched")

        // Debug SIM config
        android.util.Log.d("SendMessageDialog", "üì± SIM Config: isDualSim=${simConfig.isDualSim}")
        android.util.Log.d(
            "SendMessageDialog",
            "üì± Primary SIM: ${simConfig.primarySim.displayName} (slot ${simConfig.primarySim.simSlotIndex}, id ${simConfig.primarySim.subscriptionId})"
        )
        if (simConfig.isDualSim) {
            simConfig.allSims.forEachIndexed { index, sim ->
                android.util.Log.d(
                    "SendMessageDialog",
                    "üì± SIM $index: ${sim.displayName} (slot ${sim.simSlotIndex}, id ${sim.subscriptionId})"
                )
            }
        }

        // Validate m·∫´u tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i
        if (messageTemplate.content.isBlank()) {
            android.util.Log.e("SendMessageDialog", "‚ùå Message template is empty")
            android.widget.Toast.makeText(
                context,
                "‚ùå Vui l√≤ng c·∫•u h√¨nh m·∫´u tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i!",
                android.widget.Toast.LENGTH_LONG
            ).show()
            // ƒê√≥ng dialog n·∫øu kh√¥ng c√≥ m·∫´u tin nh·∫Øn
            onDismissRequest()
            return@LaunchedEffect
        }

        android.util.Log.d(
            "SendMessageDialog",
            "‚úÖ Message template validated, starting sendMessage"
        )
        sendMessageViewModel.sendMessage(messageTemplate, simConfig)
    }

    // Auto-close modal khi ho√†n th√†nh
    LaunchedEffect(completion) {
        completion?.let {
            android.util.Log.d("SendMessageDialog", "‚úÖ SMS completion received: $it")
            // T·∫Øt keep screen on khi ho√†n th√†nh
            if (context is android.app.Activity) {
                context.window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
            }
            // ƒê·ª£i 2 gi√¢y r·ªìi t·ª± ƒë·ªông ƒë√≥ng dialog
            kotlinx.coroutines.delay(2000)
            onDismissRequest()
        }
    }
    AlertDialog(
        onDismissRequest = {
            // NgƒÉn ƒë√≥ng dialog b·∫±ng c√°ch touch outside khi ƒëang g·ª≠i SMS
            if (isSending && millisUntilFinished > 0 && completion == null) {
                android.util.Log.d(
                    "SendMessageDialog",
                    "‚ö†Ô∏è Prevented dialog dismissal during SMS sending"
                )
                // Hi·ªÉn th·ªã c·∫£nh b√°o
                android.widget.Toast.makeText(
                    context,
                    "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë√≥ng khi ƒëang g·ª≠i SMS! H√£y d√πng n√∫t 'D·ª´ng g·ª≠i'",
                    android.widget.Toast.LENGTH_SHORT
                ).show()
            } else {
                // T·∫Øt keep screen on khi ƒë√≥ng dialog
                if (context is android.app.Activity) {
                    context.window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                    android.util.Log.d(
                        "SendMessageDialog",
                        "üí° Cleared keep screen on flag on dismiss"
                    )
                }
                onDismissRequest()
            }
        },
        icon = {
            if (completion != null) {
                // SMS ƒë√£ ho√†n th√†nh - hi·ªÉn th·ªã tick xanh
                Icon(
                    imageVector = androidx.compose.material.icons.Icons.Default.CheckCircle,
                    contentDescription = null,
                    tint = Color.Green
                )
            } else {
                // ƒêang g·ª≠i SMS - hi·ªÉn th·ªã progress indicator
                CircularProgressIndicator()
            }
        },
        title = {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                val titleText = if (completion != null) {
                    "‚úÖ Ho√†n th√†nh g·ª≠i SMS"
                } else if (isSending && millisUntilFinished > 0) {
                    "ƒêang g·ª≠i tin nh·∫Øn..."
                } else {
                    " ƒêang chu·∫©n b·ªã g·ª≠i SMS..."
                }

                Text(titleText)

                // Hi·ªÉn th·ªã progress tracking (1/10 ng∆∞·ªùi)
                if (progress.total > 0) {
                    Text(
                        text = "ƒê√£ g·ª≠i: ${progress.progress}/${progress.total} ng∆∞·ªùi",
                        fontSize = 12.sp,
                        color = if (completion != null) Color.Green else Color.Blue
                    )
                }

                if (millisUntilFinished == 0L && !isSending && completion == null && progress.total > 0) {
                    Text(
                        text = "‚è≥ ƒêang ch·ªù x√°c nh·∫≠n ho√†n th√†nh...",
                        fontSize = 12.sp,
                        color = Color.Blue
                    )
                }
            }
        },
        text = {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                // SIM info v·ªõi m√†u xanh d∆∞∆°ng
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        Icons.Default.SimCard,
                        contentDescription = null,
                        tint = Color(0xFF2196F3) // M√†u xanh d∆∞∆°ng
                    )
                    Spacer(Modifier.width(4.dp))
                    if (simConfig.isDualSim) {
                        Text(
                            "DUAL",
                            color = Color(0xFF2196F3),
                            fontWeight = FontWeight.Bold
                        )
                    } else {
                        // Hi·ªÉn th·ªã SIM d·ª±a tr√™n carrier name
                        val simText = when {
                            simConfig.primarySim.carrierName.contains(
                                "Viettel",
                                ignoreCase = true
                            ) -> "SIM ${simConfig.primarySim.simSlotIndex + 1} - VIETTEL"

                            simConfig.primarySim.carrierName.contains(
                                "Vinaphone",
                                ignoreCase = true
                            ) -> "SIM ${simConfig.primarySim.simSlotIndex + 1} - VINAPHONE"

                            simConfig.primarySim.carrierName.contains(
                                "Mobifone",
                                ignoreCase = true
                            ) -> "SIM ${simConfig.primarySim.simSlotIndex + 1} - MOBIFONE"

                            else -> "SIM ${simConfig.primarySim.simSlotIndex + 1}"
                        }
                        Text(
                            simText,
                            color = Color(0xFF2196F3),
                            fontWeight = FontWeight.Bold
                        )
                    }
                }

                Spacer(Modifier.height(8.dp))

                // Row ch·ª©a NORMAL v√† M·∫´u tin
                Row(
                    horizontalArrangement = Arrangement.spacedBy(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // NORMAL v·ªõi m√†u xanh l√°
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            Icons.Default.CheckCircle,
                            contentDescription = null,
                            tint = Color(0xFF4CAF50), // M√†u xanh l√°
                            modifier = Modifier.size(16.dp)
                        )
                        Spacer(Modifier.width(4.dp))
                        Text(
                            "NORMAL",
                            color = Color(0xFF4CAF50),
                            fontWeight = FontWeight.Bold,
                            fontSize = 12.sp
                        )
                    }

                    // M·∫´u tin v·ªõi m√†u h·ªìng
                    Row(verticalAlignment = Alignment.CenterVertically) {
//                        Icon(
//                            Icons.AutoMirrored.Filled.Message,
//                            contentDescription = null,
//                            tint = Color(0xFFE91E63), // M√†u h·ªìng
//                            modifier = Modifier.size(16.dp)
//                        )
                        Spacer(Modifier.width(4.dp))
                        Text(
                            "M·∫´u tin ${messageTemplate.id}",
                            color = Color(0xFFE91E63),
                            fontWeight = FontWeight.Bold,
                            fontSize = 12.sp
                        )
                    }
                }
                Spacer(Modifier.height(10.dp))
                HorizontalDivider()
                Spacer(Modifier.height(10.dp))

                // Hi·ªÉn th·ªã progress message t·ª´ SmsService
                if (progress.message.isNotEmpty()) {
                    Text(
                        text = progress.message,
                        fontSize = 12.sp,
                        color = Color.Gray,
                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 4.dp)
                    )
                    Spacer(Modifier.height(8.dp))
                }

                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text(
                        text = "Th·ªùi gian chi ti·∫øt:",
                        fontSize = 14.sp,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        val labels = listOf("", "Gi·ªù", "Ph√∫t", "Gi√¢y") // B·ªè days
                        time.forEachIndexed { id, item ->
                            if (id > 0) { // B·ªè qua index 0 (days)
                                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                    Box(
                                        Modifier
                                            .background(
                                                Color.Black,
                                                shape = RoundedCornerShape(8.dp)
                                            ),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text(
                                            "%02d".format(item),
                                            color = Color.White,
                                            modifier = Modifier.padding(8.dp)
                                        )
                                    }
                                    Text(
                                        labels[id],
                                        fontSize = 12.sp,
                                        modifier = Modifier.padding(top = 4.dp)
                                    )
                                }

                                if (id < time.size - 1) {
                                    Text(":", modifier = Modifier.padding(horizontal = 8.dp))
                                }
                            }
                        }
                    }
                }
            }
        },
        confirmButton = {
            TextButton(onClick = {
                // T·∫Øt keep screen on khi ƒë√≥ng dialog
                if (context is android.app.Activity) {
                    context.window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                }
                onDismissRequest()
            }) {
                Text("ƒê√≥ng")
            }
        },
        dismissButton = {
            // Ch·ªâ hi·ªÉn th·ªã n√∫t d·ª´ng khi ƒëang g·ª≠i
            if (isSending && completion == null) {
                TextButton(onClick = {
                    android.util.Log.d("SendMessageDialog", "‚õî User clicked stop button")

                    // Hi·ªÉn th·ªã c·∫£nh b√°o
                    android.widget.Toast.makeText(
                        context,
                        "‚ö†Ô∏è ƒê√£ d·ª´ng qu√° tr√¨nh g·ª≠i SMS!",
                        android.widget.Toast.LENGTH_LONG
                    ).show()

                    // T·∫Øt keep screen on
                    if (context is android.app.Activity) {
                        context.window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                    }

                    sendMessageViewModel.stop()
                    onDismissRequest()
                }) {
                    Text("üõë D·ª´ng g·ª≠i", color = Color.Red)
                }
            }
        }
    )
}

fun Long.formatDuration(): List<Long> {
    val seconds = maxOf(0L, this / 1000) // ƒê·∫£m b·∫£o kh√¥ng √¢m
    val hours = seconds / 3600
    val minutes = (seconds % 3600) / 60
    val secs = seconds % 60

    return listOf(
        0L, // kh√¥ng hi·ªÉn th·ªã days
        hours,
        minutes,
        secs
    )
}